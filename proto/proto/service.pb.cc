// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Tnode {
class ReqRegServiceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqRegService> {
} _ReqRegService_default_instance_;
class AckRegServiceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AckRegService> {
} _AckRegService_default_instance_;

namespace protobuf_proto_2fservice_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegService, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegService, svrtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegService, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegService, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegService, roomid_),
  1,
  2,
  0,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRegService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRegService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRegService, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRegService, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRegService, errmsg_),
  1,
  2,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(ReqRegService)},
  { 15, 23, sizeof(AckRegService)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqRegService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AckRegService_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto/service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _ReqRegService_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _AckRegService_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ReqRegService_default_instance_.DefaultConstruct();
  _AckRegService_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023proto/service.proto\022\005Tnode\"^\n\rReqRegSe"
      "rvice\022\020\n\010serverId\030\001 \001(\005\022\017\n\007svrType\030\002 \001(\005"
      "\022\014\n\004host\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\022\016\n\006roomId\030\005"
      " \001(\005\"A\n\rAckRegService\022\016\n\006result\030\001 \001(\021\022\020\n"
      "\010serverId\030\002 \001(\005\022\016\n\006errmsg\030\003 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 191);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/service.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_proto_2fservice_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRegService::kServerIdFieldNumber;
const int ReqRegService::kSvrTypeFieldNumber;
const int ReqRegService::kHostFieldNumber;
const int ReqRegService::kPortFieldNumber;
const int ReqRegService::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRegService::ReqRegService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tnode.ReqRegService)
}
ReqRegService::ReqRegService(const ReqRegService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  ::memcpy(&serverid_, &from.serverid_,
    reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&serverid_) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:Tnode.ReqRegService)
}

void ReqRegService::SharedCtor() {
  _cached_size_ = 0;
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverid_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&serverid_) + sizeof(roomid_));
}

ReqRegService::~ReqRegService() {
  // @@protoc_insertion_point(destructor:Tnode.ReqRegService)
  SharedDtor();
}

void ReqRegService::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqRegService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRegService::descriptor() {
  protobuf_proto_2fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqRegService& ReqRegService::default_instance() {
  protobuf_proto_2fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqRegService* ReqRegService::New(::google::protobuf::Arena* arena) const {
  ReqRegService* n = new ReqRegService;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRegService::Clear() {
// @@protoc_insertion_point(message_clear_start:Tnode.ReqRegService)
  if (has_host()) {
    GOOGLE_DCHECK(!host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*host_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&serverid_, 0, reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&serverid_) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqRegService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tnode.ReqRegService)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serverId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 svrType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_svrtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svrtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string host = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.ReqRegService.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tnode.ReqRegService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tnode.ReqRegService)
  return false;
#undef DO_
}

void ReqRegService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tnode.ReqRegService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 serverId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // optional int32 svrType = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->svrtype(), output);
  }

  // optional string host = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.ReqRegService.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->host(), output);
  }

  // optional int32 port = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional int32 roomId = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tnode.ReqRegService)
}

::google::protobuf::uint8* ReqRegService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tnode.ReqRegService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 serverId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // optional int32 svrType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->svrtype(), target);
  }

  // optional string host = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.ReqRegService.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->host(), target);
  }

  // optional int32 port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // optional int32 roomId = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tnode.ReqRegService)
  return target;
}

size_t ReqRegService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tnode.ReqRegService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string host = 3;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional int32 serverId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional int32 svrType = 2;
    if (has_svrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svrtype());
    }

    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 roomId = 5;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRegService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tnode.ReqRegService)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRegService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRegService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tnode.ReqRegService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tnode.ReqRegService)
    MergeFrom(*source);
  }
}

void ReqRegService::MergeFrom(const ReqRegService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tnode.ReqRegService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000002u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000004u) {
      svrtype_ = from.svrtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqRegService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tnode.ReqRegService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRegService::CopyFrom(const ReqRegService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tnode.ReqRegService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegService::IsInitialized() const {
  return true;
}

void ReqRegService::Swap(ReqRegService* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRegService::InternalSwap(ReqRegService* other) {
  host_.Swap(&other->host_);
  std::swap(serverid_, other->serverid_);
  std::swap(svrtype_, other->svrtype_);
  std::swap(port_, other->port_);
  std::swap(roomid_, other->roomid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRegService::GetMetadata() const {
  protobuf_proto_2fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRegService

// optional int32 serverId = 1;
bool ReqRegService::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqRegService::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqRegService::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqRegService::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
::google::protobuf::int32 ReqRegService::serverid() const {
  // @@protoc_insertion_point(field_get:Tnode.ReqRegService.serverId)
  return serverid_;
}
void ReqRegService::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.ReqRegService.serverId)
}

// optional int32 svrType = 2;
bool ReqRegService::has_svrtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqRegService::set_has_svrtype() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqRegService::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqRegService::clear_svrtype() {
  svrtype_ = 0;
  clear_has_svrtype();
}
::google::protobuf::int32 ReqRegService::svrtype() const {
  // @@protoc_insertion_point(field_get:Tnode.ReqRegService.svrType)
  return svrtype_;
}
void ReqRegService::set_svrtype(::google::protobuf::int32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:Tnode.ReqRegService.svrType)
}

// optional string host = 3;
bool ReqRegService::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqRegService::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqRegService::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqRegService::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
const ::std::string& ReqRegService::host() const {
  // @@protoc_insertion_point(field_get:Tnode.ReqRegService.host)
  return host_.GetNoArena();
}
void ReqRegService::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.ReqRegService.host)
}
#if LANG_CXX11
void ReqRegService::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.ReqRegService.host)
}
#endif
void ReqRegService::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.ReqRegService.host)
}
void ReqRegService::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.ReqRegService.host)
}
::std::string* ReqRegService::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:Tnode.ReqRegService.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqRegService::release_host() {
  // @@protoc_insertion_point(field_release:Tnode.ReqRegService.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqRegService::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:Tnode.ReqRegService.host)
}

// optional int32 port = 4;
bool ReqRegService::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqRegService::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqRegService::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqRegService::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 ReqRegService::port() const {
  // @@protoc_insertion_point(field_get:Tnode.ReqRegService.port)
  return port_;
}
void ReqRegService::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:Tnode.ReqRegService.port)
}

// optional int32 roomId = 5;
bool ReqRegService::has_roomid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReqRegService::set_has_roomid() {
  _has_bits_[0] |= 0x00000010u;
}
void ReqRegService::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReqRegService::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 ReqRegService::roomid() const {
  // @@protoc_insertion_point(field_get:Tnode.ReqRegService.roomId)
  return roomid_;
}
void ReqRegService::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.ReqRegService.roomId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckRegService::kResultFieldNumber;
const int AckRegService::kServerIdFieldNumber;
const int AckRegService::kErrmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckRegService::AckRegService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tnode.AckRegService)
}
AckRegService::AckRegService(const AckRegService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errmsg()) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&result_) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:Tnode.AckRegService)
}

void AckRegService::SharedCtor() {
  _cached_size_ = 0;
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&result_) + sizeof(serverid_));
}

AckRegService::~AckRegService() {
  // @@protoc_insertion_point(destructor:Tnode.AckRegService)
  SharedDtor();
}

void AckRegService::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AckRegService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRegService::descriptor() {
  protobuf_proto_2fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckRegService& AckRegService::default_instance() {
  protobuf_proto_2fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AckRegService* AckRegService::New(::google::protobuf::Arena* arena) const {
  AckRegService* n = new AckRegService;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckRegService::Clear() {
// @@protoc_insertion_point(message_clear_start:Tnode.AckRegService)
  if (has_errmsg()) {
    GOOGLE_DCHECK(!errmsg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*errmsg_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&result_) + sizeof(serverid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckRegService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tnode.AckRegService)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 serverId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string errmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.AckRegService.errmsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tnode.AckRegService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tnode.AckRegService)
  return false;
#undef DO_
}

void AckRegService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tnode.AckRegService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional int32 serverId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  // optional string errmsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.AckRegService.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tnode.AckRegService)
}

::google::protobuf::uint8* AckRegService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tnode.AckRegService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional int32 serverId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  // optional string errmsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.AckRegService.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tnode.AckRegService)
  return target;
}

size_t AckRegService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tnode.AckRegService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string errmsg = 3;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional sint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional int32 serverId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRegService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tnode.AckRegService)
  GOOGLE_DCHECK_NE(&from, this);
  const AckRegService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckRegService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tnode.AckRegService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tnode.AckRegService)
    MergeFrom(*source);
  }
}

void AckRegService::MergeFrom(const AckRegService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tnode.AckRegService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      serverid_ = from.serverid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckRegService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tnode.AckRegService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRegService::CopyFrom(const AckRegService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tnode.AckRegService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRegService::IsInitialized() const {
  return true;
}

void AckRegService::Swap(AckRegService* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckRegService::InternalSwap(AckRegService* other) {
  errmsg_.Swap(&other->errmsg_);
  std::swap(result_, other->result_);
  std::swap(serverid_, other->serverid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckRegService::GetMetadata() const {
  protobuf_proto_2fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckRegService

// optional sint32 result = 1;
bool AckRegService::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckRegService::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void AckRegService::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckRegService::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 AckRegService::result() const {
  // @@protoc_insertion_point(field_get:Tnode.AckRegService.result)
  return result_;
}
void AckRegService::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:Tnode.AckRegService.result)
}

// optional int32 serverId = 2;
bool AckRegService::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AckRegService::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
void AckRegService::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
void AckRegService::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
::google::protobuf::int32 AckRegService::serverid() const {
  // @@protoc_insertion_point(field_get:Tnode.AckRegService.serverId)
  return serverid_;
}
void AckRegService::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.AckRegService.serverId)
}

// optional string errmsg = 3;
bool AckRegService::has_errmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckRegService::set_has_errmsg() {
  _has_bits_[0] |= 0x00000001u;
}
void AckRegService::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckRegService::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errmsg();
}
const ::std::string& AckRegService::errmsg() const {
  // @@protoc_insertion_point(field_get:Tnode.AckRegService.errmsg)
  return errmsg_.GetNoArena();
}
void AckRegService::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.AckRegService.errmsg)
}
#if LANG_CXX11
void AckRegService::set_errmsg(::std::string&& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.AckRegService.errmsg)
}
#endif
void AckRegService::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.AckRegService.errmsg)
}
void AckRegService::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.AckRegService.errmsg)
}
::std::string* AckRegService::mutable_errmsg() {
  set_has_errmsg();
  // @@protoc_insertion_point(field_mutable:Tnode.AckRegService.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AckRegService::release_errmsg() {
  // @@protoc_insertion_point(field_release:Tnode.AckRegService.errmsg)
  clear_has_errmsg();
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AckRegService::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    set_has_errmsg();
  } else {
    clear_has_errmsg();
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:Tnode.AckRegService.errmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Tnode

// @@protoc_insertion_point(global_scope)
