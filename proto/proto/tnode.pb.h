// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/tnode.proto

#ifndef PROTOBUF_proto_2ftnode_2eproto__INCLUDED
#define PROTOBUF_proto_2ftnode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Tnode {
class AckNodeInfo;
class AckNodeInfoDefaultTypeInternal;
extern AckNodeInfoDefaultTypeInternal _AckNodeInfo_default_instance_;
class AckQueryUser;
class AckQueryUserDefaultTypeInternal;
extern AckQueryUserDefaultTypeInternal _AckQueryUser_default_instance_;
class CanalInfo;
class CanalInfoDefaultTypeInternal;
extern CanalInfoDefaultTypeInternal _CanalInfo_default_instance_;
class LobbyInfo;
class LobbyInfoDefaultTypeInternal;
extern LobbyInfoDefaultTypeInternal _LobbyInfo_default_instance_;
class NodeGroup;
class NodeGroupDefaultTypeInternal;
extern NodeGroupDefaultTypeInternal _NodeGroup_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class PlatformInfo;
class PlatformInfoDefaultTypeInternal;
extern PlatformInfoDefaultTypeInternal _PlatformInfo_default_instance_;
class ReqNodeInfo;
class ReqNodeInfoDefaultTypeInternal;
extern ReqNodeInfoDefaultTypeInternal _ReqNodeInfo_default_instance_;
class ReqQueryUser;
class ReqQueryUserDefaultTypeInternal;
extern ReqQueryUserDefaultTypeInternal _ReqQueryUser_default_instance_;
class ReqReloadData;
class ReqReloadDataDefaultTypeInternal;
extern ReqReloadDataDefaultTypeInternal _ReqReloadData_default_instance_;
}  // namespace Tnode

namespace Tnode {

namespace protobuf_proto_2ftnode_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_proto_2ftnode_2eproto

// ===================================================================

class ReqNodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Tnode.ReqNodeInfo) */ {
 public:
  ReqNodeInfo();
  virtual ~ReqNodeInfo();

  ReqNodeInfo(const ReqNodeInfo& from);

  inline ReqNodeInfo& operator=(const ReqNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqNodeInfo& default_instance();

  static inline const ReqNodeInfo* internal_default_instance() {
    return reinterpret_cast<const ReqNodeInfo*>(
               &_ReqNodeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ReqNodeInfo* other);

  // implements Message ----------------------------------------------

  inline ReqNodeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqNodeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqNodeInfo& from);
  void MergeFrom(const ReqNodeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqNodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Tnode.ReqNodeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2ftnode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlatformInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Tnode.PlatformInfo) */ {
 public:
  PlatformInfo();
  virtual ~PlatformInfo();

  PlatformInfo(const PlatformInfo& from);

  inline PlatformInfo& operator=(const PlatformInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlatformInfo& default_instance();

  static inline const PlatformInfo* internal_default_instance() {
    return reinterpret_cast<const PlatformInfo*>(
               &_PlatformInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PlatformInfo* other);

  // implements Message ----------------------------------------------

  inline PlatformInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PlatformInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlatformInfo& from);
  void MergeFrom(const PlatformInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlatformInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string platformName = 2;
  bool has_platformname() const;
  void clear_platformname();
  static const int kPlatformNameFieldNumber = 2;
  const ::std::string& platformname() const;
  void set_platformname(const ::std::string& value);
  #if LANG_CXX11
  void set_platformname(::std::string&& value);
  #endif
  void set_platformname(const char* value);
  void set_platformname(const char* value, size_t size);
  ::std::string* mutable_platformname();
  ::std::string* release_platformname();
  void set_allocated_platformname(::std::string* platformname);

  // optional string homeUrl = 3;
  bool has_homeurl() const;
  void clear_homeurl();
  static const int kHomeUrlFieldNumber = 3;
  const ::std::string& homeurl() const;
  void set_homeurl(const ::std::string& value);
  #if LANG_CXX11
  void set_homeurl(::std::string&& value);
  #endif
  void set_homeurl(const char* value);
  void set_homeurl(const char* value, size_t size);
  ::std::string* mutable_homeurl();
  ::std::string* release_homeurl();
  void set_allocated_homeurl(::std::string* homeurl);

  // optional string resUrl = 4;
  bool has_resurl() const;
  void clear_resurl();
  static const int kResUrlFieldNumber = 4;
  const ::std::string& resurl() const;
  void set_resurl(const ::std::string& value);
  #if LANG_CXX11
  void set_resurl(::std::string&& value);
  #endif
  void set_resurl(const char* value);
  void set_resurl(const char* value, size_t size);
  ::std::string* mutable_resurl();
  ::std::string* release_resurl();
  void set_allocated_resurl(::std::string* resurl);

  // optional int32 platformId = 1;
  bool has_platformid() const;
  void clear_platformid();
  static const int kPlatformIdFieldNumber = 1;
  ::google::protobuf::int32 platformid() const;
  void set_platformid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Tnode.PlatformInfo)
 private:
  void set_has_platformid();
  void clear_has_platformid();
  void set_has_platformname();
  void clear_has_platformname();
  void set_has_homeurl();
  void clear_has_homeurl();
  void set_has_resurl();
  void clear_has_resurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr platformname_;
  ::google::protobuf::internal::ArenaStringPtr homeurl_;
  ::google::protobuf::internal::ArenaStringPtr resurl_;
  ::google::protobuf::int32 platformid_;
  friend struct protobuf_proto_2ftnode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CanalInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Tnode.CanalInfo) */ {
 public:
  CanalInfo();
  virtual ~CanalInfo();

  CanalInfo(const CanalInfo& from);

  inline CanalInfo& operator=(const CanalInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CanalInfo& default_instance();

  static inline const CanalInfo* internal_default_instance() {
    return reinterpret_cast<const CanalInfo*>(
               &_CanalInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CanalInfo* other);

  // implements Message ----------------------------------------------

  inline CanalInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CanalInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CanalInfo& from);
  void MergeFrom(const CanalInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CanalInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string canalName = 3;
  bool has_canalname() const;
  void clear_canalname();
  static const int kCanalNameFieldNumber = 3;
  const ::std::string& canalname() const;
  void set_canalname(const ::std::string& value);
  #if LANG_CXX11
  void set_canalname(::std::string&& value);
  #endif
  void set_canalname(const char* value);
  void set_canalname(const char* value, size_t size);
  ::std::string* mutable_canalname();
  ::std::string* release_canalname();
  void set_allocated_canalname(::std::string* canalname);

  // optional string advUrl = 7;
  bool has_advurl() const;
  void clear_advurl();
  static const int kAdvUrlFieldNumber = 7;
  const ::std::string& advurl() const;
  void set_advurl(const ::std::string& value);
  #if LANG_CXX11
  void set_advurl(::std::string&& value);
  #endif
  void set_advurl(const char* value);
  void set_advurl(const char* value, size_t size);
  ::std::string* mutable_advurl();
  ::std::string* release_advurl();
  void set_allocated_advurl(::std::string* advurl);

  // optional string serviceUrl = 8;
  bool has_serviceurl() const;
  void clear_serviceurl();
  static const int kServiceUrlFieldNumber = 8;
  const ::std::string& serviceurl() const;
  void set_serviceurl(const ::std::string& value);
  #if LANG_CXX11
  void set_serviceurl(::std::string&& value);
  #endif
  void set_serviceurl(const char* value);
  void set_serviceurl(const char* value, size_t size);
  ::std::string* mutable_serviceurl();
  ::std::string* release_serviceurl();
  void set_allocated_serviceurl(::std::string* serviceurl);

  // optional string iosUrl = 9;
  bool has_iosurl() const;
  void clear_iosurl();
  static const int kIosUrlFieldNumber = 9;
  const ::std::string& iosurl() const;
  void set_iosurl(const ::std::string& value);
  #if LANG_CXX11
  void set_iosurl(::std::string&& value);
  #endif
  void set_iosurl(const char* value);
  void set_iosurl(const char* value, size_t size);
  ::std::string* mutable_iosurl();
  ::std::string* release_iosurl();
  void set_allocated_iosurl(::std::string* iosurl);

  // optional string webUrl = 11;
  bool has_weburl() const;
  void clear_weburl();
  static const int kWebUrlFieldNumber = 11;
  const ::std::string& weburl() const;
  void set_weburl(const ::std::string& value);
  #if LANG_CXX11
  void set_weburl(::std::string&& value);
  #endif
  void set_weburl(const char* value);
  void set_weburl(const char* value, size_t size);
  ::std::string* mutable_weburl();
  ::std::string* release_weburl();
  void set_allocated_weburl(::std::string* weburl);

  // optional int32 platformId = 1;
  bool has_platformid() const;
  void clear_platformid();
  static const int kPlatformIdFieldNumber = 1;
  ::google::protobuf::int32 platformid() const;
  void set_platformid(::google::protobuf::int32 value);

  // optional int32 canalId = 2;
  bool has_canalid() const;
  void clear_canalid();
  static const int kCanalIdFieldNumber = 2;
  ::google::protobuf::int32 canalid() const;
  void set_canalid(::google::protobuf::int32 value);

  // optional int32 isAppStore = 4;
  bool has_isappstore() const;
  void clear_isappstore();
  static const int kIsAppStoreFieldNumber = 4;
  ::google::protobuf::int32 isappstore() const;
  void set_isappstore(::google::protobuf::int32 value);

  // optional int32 allowWeiXinLogin = 5;
  bool has_allowweixinlogin() const;
  void clear_allowweixinlogin();
  static const int kAllowWeiXinLoginFieldNumber = 5;
  ::google::protobuf::int32 allowweixinlogin() const;
  void set_allowweixinlogin(::google::protobuf::int32 value);

  // optional int32 showGuide = 6;
  bool has_showguide() const;
  void clear_showguide();
  static const int kShowGuideFieldNumber = 6;
  ::google::protobuf::int32 showguide() const;
  void set_showguide(::google::protobuf::int32 value);

  // optional int32 showWeb = 10;
  bool has_showweb() const;
  void clear_showweb();
  static const int kShowWebFieldNumber = 10;
  ::google::protobuf::int32 showweb() const;
  void set_showweb(::google::protobuf::int32 value);

  // optional int32 allowGuestLogin = 12;
  bool has_allowguestlogin() const;
  void clear_allowguestlogin();
  static const int kAllowGuestLoginFieldNumber = 12;
  ::google::protobuf::int32 allowguestlogin() const;
  void set_allowguestlogin(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Tnode.CanalInfo)
 private:
  void set_has_platformid();
  void clear_has_platformid();
  void set_has_canalid();
  void clear_has_canalid();
  void set_has_canalname();
  void clear_has_canalname();
  void set_has_isappstore();
  void clear_has_isappstore();
  void set_has_allowweixinlogin();
  void clear_has_allowweixinlogin();
  void set_has_showguide();
  void clear_has_showguide();
  void set_has_advurl();
  void clear_has_advurl();
  void set_has_serviceurl();
  void clear_has_serviceurl();
  void set_has_iosurl();
  void clear_has_iosurl();
  void set_has_showweb();
  void clear_has_showweb();
  void set_has_weburl();
  void clear_has_weburl();
  void set_has_allowguestlogin();
  void clear_has_allowguestlogin();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr canalname_;
  ::google::protobuf::internal::ArenaStringPtr advurl_;
  ::google::protobuf::internal::ArenaStringPtr serviceurl_;
  ::google::protobuf::internal::ArenaStringPtr iosurl_;
  ::google::protobuf::internal::ArenaStringPtr weburl_;
  ::google::protobuf::int32 platformid_;
  ::google::protobuf::int32 canalid_;
  ::google::protobuf::int32 isappstore_;
  ::google::protobuf::int32 allowweixinlogin_;
  ::google::protobuf::int32 showguide_;
  ::google::protobuf::int32 showweb_;
  ::google::protobuf::int32 allowguestlogin_;
  friend struct protobuf_proto_2ftnode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LobbyInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Tnode.LobbyInfo) */ {
 public:
  LobbyInfo();
  virtual ~LobbyInfo();

  LobbyInfo(const LobbyInfo& from);

  inline LobbyInfo& operator=(const LobbyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LobbyInfo& default_instance();

  static inline const LobbyInfo* internal_default_instance() {
    return reinterpret_cast<const LobbyInfo*>(
               &_LobbyInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LobbyInfo* other);

  // implements Message ----------------------------------------------

  inline LobbyInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  LobbyInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LobbyInfo& from);
  void MergeFrom(const LobbyInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LobbyInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string downloadUrl = 6;
  bool has_downloadurl() const;
  void clear_downloadurl();
  static const int kDownloadUrlFieldNumber = 6;
  const ::std::string& downloadurl() const;
  void set_downloadurl(const ::std::string& value);
  #if LANG_CXX11
  void set_downloadurl(::std::string&& value);
  #endif
  void set_downloadurl(const char* value);
  void set_downloadurl(const char* value, size_t size);
  ::std::string* mutable_downloadurl();
  ::std::string* release_downloadurl();
  void set_allocated_downloadurl(::std::string* downloadurl);

  // optional string downGameUrl = 7;
  bool has_downgameurl() const;
  void clear_downgameurl();
  static const int kDownGameUrlFieldNumber = 7;
  const ::std::string& downgameurl() const;
  void set_downgameurl(const ::std::string& value);
  #if LANG_CXX11
  void set_downgameurl(::std::string&& value);
  #endif
  void set_downgameurl(const char* value);
  void set_downgameurl(const char* value, size_t size);
  ::std::string* mutable_downgameurl();
  ::std::string* release_downgameurl();
  void set_allocated_downgameurl(::std::string* downgameurl);

  // optional int32 platformId = 1;
  bool has_platformid() const;
  void clear_platformid();
  static const int kPlatformIdFieldNumber = 1;
  ::google::protobuf::int32 platformid() const;
  void set_platformid(::google::protobuf::int32 value);

  // optional int32 gameId = 2;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameIdFieldNumber = 2;
  ::google::protobuf::int32 gameid() const;
  void set_gameid(::google::protobuf::int32 value);

  // optional int32 canalId = 3;
  bool has_canalid() const;
  void clear_canalid();
  static const int kCanalIdFieldNumber = 3;
  ::google::protobuf::int32 canalid() const;
  void set_canalid(::google::protobuf::int32 value);

  // optional int32 clientVer = 4;
  bool has_clientver() const;
  void clear_clientver();
  static const int kClientVerFieldNumber = 4;
  ::google::protobuf::int32 clientver() const;
  void set_clientver(::google::protobuf::int32 value);

  // optional int32 resVer = 5;
  bool has_resver() const;
  void clear_resver();
  static const int kResVerFieldNumber = 5;
  ::google::protobuf::int32 resver() const;
  void set_resver(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Tnode.LobbyInfo)
 private:
  void set_has_platformid();
  void clear_has_platformid();
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_canalid();
  void clear_has_canalid();
  void set_has_clientver();
  void clear_has_clientver();
  void set_has_resver();
  void clear_has_resver();
  void set_has_downloadurl();
  void clear_has_downloadurl();
  void set_has_downgameurl();
  void clear_has_downgameurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr downloadurl_;
  ::google::protobuf::internal::ArenaStringPtr downgameurl_;
  ::google::protobuf::int32 platformid_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 canalid_;
  ::google::protobuf::int32 clientver_;
  ::google::protobuf::int32 resver_;
  friend struct protobuf_proto_2ftnode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Tnode.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfo& default_instance();

  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(NodeInfo* other);

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Tnode.NodeInfo)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  friend struct protobuf_proto_2ftnode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Tnode.NodeGroup) */ {
 public:
  NodeGroup();
  virtual ~NodeGroup();

  NodeGroup(const NodeGroup& from);

  inline NodeGroup& operator=(const NodeGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeGroup& default_instance();

  static inline const NodeGroup* internal_default_instance() {
    return reinterpret_cast<const NodeGroup*>(
               &_NodeGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(NodeGroup* other);

  // implements Message ----------------------------------------------

  inline NodeGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeGroup& from);
  void MergeFrom(const NodeGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Tnode.NodeInfo nodes = 3;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 3;
  const ::Tnode::NodeInfo& nodes(int index) const;
  ::Tnode::NodeInfo* mutable_nodes(int index);
  ::Tnode::NodeInfo* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::Tnode::NodeInfo >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::Tnode::NodeInfo >&
      nodes() const;

  // optional int32 canalId = 1;
  bool has_canalid() const;
  void clear_canalid();
  static const int kCanalIdFieldNumber = 1;
  ::google::protobuf::int32 canalid() const;
  void set_canalid(::google::protobuf::int32 value);

  // optional int32 vipLevel = 2;
  bool has_viplevel() const;
  void clear_viplevel();
  static const int kVipLevelFieldNumber = 2;
  ::google::protobuf::int32 viplevel() const;
  void set_viplevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Tnode.NodeGroup)
 private:
  void set_has_canalid();
  void clear_has_canalid();
  void set_has_viplevel();
  void clear_has_viplevel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Tnode::NodeInfo > nodes_;
  ::google::protobuf::int32 canalid_;
  ::google::protobuf::int32 viplevel_;
  friend struct protobuf_proto_2ftnode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AckNodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Tnode.AckNodeInfo) */ {
 public:
  AckNodeInfo();
  virtual ~AckNodeInfo();

  AckNodeInfo(const AckNodeInfo& from);

  inline AckNodeInfo& operator=(const AckNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckNodeInfo& default_instance();

  static inline const AckNodeInfo* internal_default_instance() {
    return reinterpret_cast<const AckNodeInfo*>(
               &_AckNodeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(AckNodeInfo* other);

  // implements Message ----------------------------------------------

  inline AckNodeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  AckNodeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckNodeInfo& from);
  void MergeFrom(const AckNodeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckNodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Tnode.LobbyInfo lobbys = 2;
  int lobbys_size() const;
  void clear_lobbys();
  static const int kLobbysFieldNumber = 2;
  const ::Tnode::LobbyInfo& lobbys(int index) const;
  ::Tnode::LobbyInfo* mutable_lobbys(int index);
  ::Tnode::LobbyInfo* add_lobbys();
  ::google::protobuf::RepeatedPtrField< ::Tnode::LobbyInfo >*
      mutable_lobbys();
  const ::google::protobuf::RepeatedPtrField< ::Tnode::LobbyInfo >&
      lobbys() const;

  // repeated .Tnode.CanalInfo canals = 3;
  int canals_size() const;
  void clear_canals();
  static const int kCanalsFieldNumber = 3;
  const ::Tnode::CanalInfo& canals(int index) const;
  ::Tnode::CanalInfo* mutable_canals(int index);
  ::Tnode::CanalInfo* add_canals();
  ::google::protobuf::RepeatedPtrField< ::Tnode::CanalInfo >*
      mutable_canals();
  const ::google::protobuf::RepeatedPtrField< ::Tnode::CanalInfo >&
      canals() const;

  // repeated .Tnode.NodeGroup nodeGroups = 4;
  int nodegroups_size() const;
  void clear_nodegroups();
  static const int kNodeGroupsFieldNumber = 4;
  const ::Tnode::NodeGroup& nodegroups(int index) const;
  ::Tnode::NodeGroup* mutable_nodegroups(int index);
  ::Tnode::NodeGroup* add_nodegroups();
  ::google::protobuf::RepeatedPtrField< ::Tnode::NodeGroup >*
      mutable_nodegroups();
  const ::google::protobuf::RepeatedPtrField< ::Tnode::NodeGroup >&
      nodegroups() const;

  // optional .Tnode.PlatformInfo platform = 1;
  bool has_platform() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 1;
  const ::Tnode::PlatformInfo& platform() const;
  ::Tnode::PlatformInfo* mutable_platform();
  ::Tnode::PlatformInfo* release_platform();
  void set_allocated_platform(::Tnode::PlatformInfo* platform);

  // @@protoc_insertion_point(class_scope:Tnode.AckNodeInfo)
 private:
  void set_has_platform();
  void clear_has_platform();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Tnode::LobbyInfo > lobbys_;
  ::google::protobuf::RepeatedPtrField< ::Tnode::CanalInfo > canals_;
  ::google::protobuf::RepeatedPtrField< ::Tnode::NodeGroup > nodegroups_;
  ::Tnode::PlatformInfo* platform_;
  friend struct protobuf_proto_2ftnode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqQueryUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Tnode.ReqQueryUser) */ {
 public:
  ReqQueryUser();
  virtual ~ReqQueryUser();

  ReqQueryUser(const ReqQueryUser& from);

  inline ReqQueryUser& operator=(const ReqQueryUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqQueryUser& default_instance();

  static inline const ReqQueryUser* internal_default_instance() {
    return reinterpret_cast<const ReqQueryUser*>(
               &_ReqQueryUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ReqQueryUser* other);

  // implements Message ----------------------------------------------

  inline ReqQueryUser* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqQueryUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqQueryUser& from);
  void MergeFrom(const ReqQueryUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqQueryUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string loginAcc = 1;
  bool has_loginacc() const;
  void clear_loginacc();
  static const int kLoginAccFieldNumber = 1;
  const ::std::string& loginacc() const;
  void set_loginacc(const ::std::string& value);
  #if LANG_CXX11
  void set_loginacc(::std::string&& value);
  #endif
  void set_loginacc(const char* value);
  void set_loginacc(const char* value, size_t size);
  ::std::string* mutable_loginacc();
  ::std::string* release_loginacc();
  void set_allocated_loginacc(::std::string* loginacc);

  // optional int32 canalId = 2;
  bool has_canalid() const;
  void clear_canalid();
  static const int kCanalIdFieldNumber = 2;
  ::google::protobuf::int32 canalid() const;
  void set_canalid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Tnode.ReqQueryUser)
 private:
  void set_has_loginacc();
  void clear_has_loginacc();
  void set_has_canalid();
  void clear_has_canalid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr loginacc_;
  ::google::protobuf::int32 canalid_;
  friend struct protobuf_proto_2ftnode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AckQueryUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Tnode.AckQueryUser) */ {
 public:
  AckQueryUser();
  virtual ~AckQueryUser();

  AckQueryUser(const AckQueryUser& from);

  inline AckQueryUser& operator=(const AckQueryUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckQueryUser& default_instance();

  static inline const AckQueryUser* internal_default_instance() {
    return reinterpret_cast<const AckQueryUser*>(
               &_AckQueryUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(AckQueryUser* other);

  // implements Message ----------------------------------------------

  inline AckQueryUser* New() const PROTOBUF_FINAL { return New(NULL); }

  AckQueryUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckQueryUser& from);
  void MergeFrom(const AckQueryUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckQueryUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string loginAcc = 3;
  bool has_loginacc() const;
  void clear_loginacc();
  static const int kLoginAccFieldNumber = 3;
  const ::std::string& loginacc() const;
  void set_loginacc(const ::std::string& value);
  #if LANG_CXX11
  void set_loginacc(::std::string&& value);
  #endif
  void set_loginacc(const char* value);
  void set_loginacc(const char* value, size_t size);
  ::std::string* mutable_loginacc();
  ::std::string* release_loginacc();
  void set_allocated_loginacc(::std::string* loginacc);

  // optional string nickName = 5;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 5;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional int32 canalId = 1;
  bool has_canalid() const;
  void clear_canalid();
  static const int kCanalIdFieldNumber = 1;
  ::google::protobuf::int32 canalid() const;
  void set_canalid(::google::protobuf::int32 value);

  // optional int32 platformId = 2;
  bool has_platformid() const;
  void clear_platformid();
  static const int kPlatformIdFieldNumber = 2;
  ::google::protobuf::int32 platformid() const;
  void set_platformid(::google::protobuf::int32 value);

  // optional uint32 userId = 4;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 4;
  ::google::protobuf::uint32 userid() const;
  void set_userid(::google::protobuf::uint32 value);

  // optional int32 vipLevel = 6;
  bool has_viplevel() const;
  void clear_viplevel();
  static const int kVipLevelFieldNumber = 6;
  ::google::protobuf::int32 viplevel() const;
  void set_viplevel(::google::protobuf::int32 value);

  // optional int32 regTime = 7;
  bool has_regtime() const;
  void clear_regtime();
  static const int kRegTimeFieldNumber = 7;
  ::google::protobuf::int32 regtime() const;
  void set_regtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Tnode.AckQueryUser)
 private:
  void set_has_canalid();
  void clear_has_canalid();
  void set_has_platformid();
  void clear_has_platformid();
  void set_has_loginacc();
  void clear_has_loginacc();
  void set_has_userid();
  void clear_has_userid();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_viplevel();
  void clear_has_viplevel();
  void set_has_regtime();
  void clear_has_regtime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr loginacc_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::int32 canalid_;
  ::google::protobuf::int32 platformid_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 regtime_;
  friend struct protobuf_proto_2ftnode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqReloadData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Tnode.ReqReloadData) */ {
 public:
  ReqReloadData();
  virtual ~ReqReloadData();

  ReqReloadData(const ReqReloadData& from);

  inline ReqReloadData& operator=(const ReqReloadData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqReloadData& default_instance();

  static inline const ReqReloadData* internal_default_instance() {
    return reinterpret_cast<const ReqReloadData*>(
               &_ReqReloadData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ReqReloadData* other);

  // implements Message ----------------------------------------------

  inline ReqReloadData* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqReloadData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqReloadData& from);
  void MergeFrom(const ReqReloadData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqReloadData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 opcode = 1;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Tnode.ReqReloadData)
 private:
  void set_has_opcode();
  void clear_has_opcode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 opcode_;
  friend struct protobuf_proto_2ftnode_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqNodeInfo

// -------------------------------------------------------------------

// PlatformInfo

// optional int32 platformId = 1;
inline bool PlatformInfo::has_platformid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlatformInfo::set_has_platformid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlatformInfo::clear_has_platformid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlatformInfo::clear_platformid() {
  platformid_ = 0;
  clear_has_platformid();
}
inline ::google::protobuf::int32 PlatformInfo::platformid() const {
  // @@protoc_insertion_point(field_get:Tnode.PlatformInfo.platformId)
  return platformid_;
}
inline void PlatformInfo::set_platformid(::google::protobuf::int32 value) {
  set_has_platformid();
  platformid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.PlatformInfo.platformId)
}

// optional string platformName = 2;
inline bool PlatformInfo::has_platformname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlatformInfo::set_has_platformname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlatformInfo::clear_has_platformname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlatformInfo::clear_platformname() {
  platformname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platformname();
}
inline const ::std::string& PlatformInfo::platformname() const {
  // @@protoc_insertion_point(field_get:Tnode.PlatformInfo.platformName)
  return platformname_.GetNoArena();
}
inline void PlatformInfo::set_platformname(const ::std::string& value) {
  set_has_platformname();
  platformname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.PlatformInfo.platformName)
}
#if LANG_CXX11
inline void PlatformInfo::set_platformname(::std::string&& value) {
  set_has_platformname();
  platformname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.PlatformInfo.platformName)
}
#endif
inline void PlatformInfo::set_platformname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platformname();
  platformname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.PlatformInfo.platformName)
}
inline void PlatformInfo::set_platformname(const char* value, size_t size) {
  set_has_platformname();
  platformname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.PlatformInfo.platformName)
}
inline ::std::string* PlatformInfo::mutable_platformname() {
  set_has_platformname();
  // @@protoc_insertion_point(field_mutable:Tnode.PlatformInfo.platformName)
  return platformname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlatformInfo::release_platformname() {
  // @@protoc_insertion_point(field_release:Tnode.PlatformInfo.platformName)
  clear_has_platformname();
  return platformname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlatformInfo::set_allocated_platformname(::std::string* platformname) {
  if (platformname != NULL) {
    set_has_platformname();
  } else {
    clear_has_platformname();
  }
  platformname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platformname);
  // @@protoc_insertion_point(field_set_allocated:Tnode.PlatformInfo.platformName)
}

// optional string homeUrl = 3;
inline bool PlatformInfo::has_homeurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlatformInfo::set_has_homeurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlatformInfo::clear_has_homeurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlatformInfo::clear_homeurl() {
  homeurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_homeurl();
}
inline const ::std::string& PlatformInfo::homeurl() const {
  // @@protoc_insertion_point(field_get:Tnode.PlatformInfo.homeUrl)
  return homeurl_.GetNoArena();
}
inline void PlatformInfo::set_homeurl(const ::std::string& value) {
  set_has_homeurl();
  homeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.PlatformInfo.homeUrl)
}
#if LANG_CXX11
inline void PlatformInfo::set_homeurl(::std::string&& value) {
  set_has_homeurl();
  homeurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.PlatformInfo.homeUrl)
}
#endif
inline void PlatformInfo::set_homeurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_homeurl();
  homeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.PlatformInfo.homeUrl)
}
inline void PlatformInfo::set_homeurl(const char* value, size_t size) {
  set_has_homeurl();
  homeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.PlatformInfo.homeUrl)
}
inline ::std::string* PlatformInfo::mutable_homeurl() {
  set_has_homeurl();
  // @@protoc_insertion_point(field_mutable:Tnode.PlatformInfo.homeUrl)
  return homeurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlatformInfo::release_homeurl() {
  // @@protoc_insertion_point(field_release:Tnode.PlatformInfo.homeUrl)
  clear_has_homeurl();
  return homeurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlatformInfo::set_allocated_homeurl(::std::string* homeurl) {
  if (homeurl != NULL) {
    set_has_homeurl();
  } else {
    clear_has_homeurl();
  }
  homeurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), homeurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.PlatformInfo.homeUrl)
}

// optional string resUrl = 4;
inline bool PlatformInfo::has_resurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlatformInfo::set_has_resurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlatformInfo::clear_has_resurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlatformInfo::clear_resurl() {
  resurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resurl();
}
inline const ::std::string& PlatformInfo::resurl() const {
  // @@protoc_insertion_point(field_get:Tnode.PlatformInfo.resUrl)
  return resurl_.GetNoArena();
}
inline void PlatformInfo::set_resurl(const ::std::string& value) {
  set_has_resurl();
  resurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.PlatformInfo.resUrl)
}
#if LANG_CXX11
inline void PlatformInfo::set_resurl(::std::string&& value) {
  set_has_resurl();
  resurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.PlatformInfo.resUrl)
}
#endif
inline void PlatformInfo::set_resurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resurl();
  resurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.PlatformInfo.resUrl)
}
inline void PlatformInfo::set_resurl(const char* value, size_t size) {
  set_has_resurl();
  resurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.PlatformInfo.resUrl)
}
inline ::std::string* PlatformInfo::mutable_resurl() {
  set_has_resurl();
  // @@protoc_insertion_point(field_mutable:Tnode.PlatformInfo.resUrl)
  return resurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlatformInfo::release_resurl() {
  // @@protoc_insertion_point(field_release:Tnode.PlatformInfo.resUrl)
  clear_has_resurl();
  return resurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlatformInfo::set_allocated_resurl(::std::string* resurl) {
  if (resurl != NULL) {
    set_has_resurl();
  } else {
    clear_has_resurl();
  }
  resurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.PlatformInfo.resUrl)
}

// -------------------------------------------------------------------

// CanalInfo

// optional int32 platformId = 1;
inline bool CanalInfo::has_platformid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CanalInfo::set_has_platformid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CanalInfo::clear_has_platformid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CanalInfo::clear_platformid() {
  platformid_ = 0;
  clear_has_platformid();
}
inline ::google::protobuf::int32 CanalInfo::platformid() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.platformId)
  return platformid_;
}
inline void CanalInfo::set_platformid(::google::protobuf::int32 value) {
  set_has_platformid();
  platformid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.platformId)
}

// optional int32 canalId = 2;
inline bool CanalInfo::has_canalid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CanalInfo::set_has_canalid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CanalInfo::clear_has_canalid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CanalInfo::clear_canalid() {
  canalid_ = 0;
  clear_has_canalid();
}
inline ::google::protobuf::int32 CanalInfo::canalid() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.canalId)
  return canalid_;
}
inline void CanalInfo::set_canalid(::google::protobuf::int32 value) {
  set_has_canalid();
  canalid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.canalId)
}

// optional string canalName = 3;
inline bool CanalInfo::has_canalname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CanalInfo::set_has_canalname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CanalInfo::clear_has_canalname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CanalInfo::clear_canalname() {
  canalname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canalname();
}
inline const ::std::string& CanalInfo::canalname() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.canalName)
  return canalname_.GetNoArena();
}
inline void CanalInfo::set_canalname(const ::std::string& value) {
  set_has_canalname();
  canalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.canalName)
}
#if LANG_CXX11
inline void CanalInfo::set_canalname(::std::string&& value) {
  set_has_canalname();
  canalname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.CanalInfo.canalName)
}
#endif
inline void CanalInfo::set_canalname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_canalname();
  canalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.CanalInfo.canalName)
}
inline void CanalInfo::set_canalname(const char* value, size_t size) {
  set_has_canalname();
  canalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.CanalInfo.canalName)
}
inline ::std::string* CanalInfo::mutable_canalname() {
  set_has_canalname();
  // @@protoc_insertion_point(field_mutable:Tnode.CanalInfo.canalName)
  return canalname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CanalInfo::release_canalname() {
  // @@protoc_insertion_point(field_release:Tnode.CanalInfo.canalName)
  clear_has_canalname();
  return canalname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CanalInfo::set_allocated_canalname(::std::string* canalname) {
  if (canalname != NULL) {
    set_has_canalname();
  } else {
    clear_has_canalname();
  }
  canalname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canalname);
  // @@protoc_insertion_point(field_set_allocated:Tnode.CanalInfo.canalName)
}

// optional int32 isAppStore = 4;
inline bool CanalInfo::has_isappstore() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CanalInfo::set_has_isappstore() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CanalInfo::clear_has_isappstore() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CanalInfo::clear_isappstore() {
  isappstore_ = 0;
  clear_has_isappstore();
}
inline ::google::protobuf::int32 CanalInfo::isappstore() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.isAppStore)
  return isappstore_;
}
inline void CanalInfo::set_isappstore(::google::protobuf::int32 value) {
  set_has_isappstore();
  isappstore_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.isAppStore)
}

// optional int32 allowWeiXinLogin = 5;
inline bool CanalInfo::has_allowweixinlogin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CanalInfo::set_has_allowweixinlogin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CanalInfo::clear_has_allowweixinlogin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CanalInfo::clear_allowweixinlogin() {
  allowweixinlogin_ = 0;
  clear_has_allowweixinlogin();
}
inline ::google::protobuf::int32 CanalInfo::allowweixinlogin() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.allowWeiXinLogin)
  return allowweixinlogin_;
}
inline void CanalInfo::set_allowweixinlogin(::google::protobuf::int32 value) {
  set_has_allowweixinlogin();
  allowweixinlogin_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.allowWeiXinLogin)
}

// optional int32 showGuide = 6;
inline bool CanalInfo::has_showguide() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CanalInfo::set_has_showguide() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CanalInfo::clear_has_showguide() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CanalInfo::clear_showguide() {
  showguide_ = 0;
  clear_has_showguide();
}
inline ::google::protobuf::int32 CanalInfo::showguide() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.showGuide)
  return showguide_;
}
inline void CanalInfo::set_showguide(::google::protobuf::int32 value) {
  set_has_showguide();
  showguide_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.showGuide)
}

// optional string advUrl = 7;
inline bool CanalInfo::has_advurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CanalInfo::set_has_advurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CanalInfo::clear_has_advurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CanalInfo::clear_advurl() {
  advurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_advurl();
}
inline const ::std::string& CanalInfo::advurl() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.advUrl)
  return advurl_.GetNoArena();
}
inline void CanalInfo::set_advurl(const ::std::string& value) {
  set_has_advurl();
  advurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.advUrl)
}
#if LANG_CXX11
inline void CanalInfo::set_advurl(::std::string&& value) {
  set_has_advurl();
  advurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.CanalInfo.advUrl)
}
#endif
inline void CanalInfo::set_advurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_advurl();
  advurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.CanalInfo.advUrl)
}
inline void CanalInfo::set_advurl(const char* value, size_t size) {
  set_has_advurl();
  advurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.CanalInfo.advUrl)
}
inline ::std::string* CanalInfo::mutable_advurl() {
  set_has_advurl();
  // @@protoc_insertion_point(field_mutable:Tnode.CanalInfo.advUrl)
  return advurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CanalInfo::release_advurl() {
  // @@protoc_insertion_point(field_release:Tnode.CanalInfo.advUrl)
  clear_has_advurl();
  return advurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CanalInfo::set_allocated_advurl(::std::string* advurl) {
  if (advurl != NULL) {
    set_has_advurl();
  } else {
    clear_has_advurl();
  }
  advurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), advurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.CanalInfo.advUrl)
}

// optional string serviceUrl = 8;
inline bool CanalInfo::has_serviceurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CanalInfo::set_has_serviceurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CanalInfo::clear_has_serviceurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CanalInfo::clear_serviceurl() {
  serviceurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serviceurl();
}
inline const ::std::string& CanalInfo::serviceurl() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.serviceUrl)
  return serviceurl_.GetNoArena();
}
inline void CanalInfo::set_serviceurl(const ::std::string& value) {
  set_has_serviceurl();
  serviceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.serviceUrl)
}
#if LANG_CXX11
inline void CanalInfo::set_serviceurl(::std::string&& value) {
  set_has_serviceurl();
  serviceurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.CanalInfo.serviceUrl)
}
#endif
inline void CanalInfo::set_serviceurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serviceurl();
  serviceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.CanalInfo.serviceUrl)
}
inline void CanalInfo::set_serviceurl(const char* value, size_t size) {
  set_has_serviceurl();
  serviceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.CanalInfo.serviceUrl)
}
inline ::std::string* CanalInfo::mutable_serviceurl() {
  set_has_serviceurl();
  // @@protoc_insertion_point(field_mutable:Tnode.CanalInfo.serviceUrl)
  return serviceurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CanalInfo::release_serviceurl() {
  // @@protoc_insertion_point(field_release:Tnode.CanalInfo.serviceUrl)
  clear_has_serviceurl();
  return serviceurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CanalInfo::set_allocated_serviceurl(::std::string* serviceurl) {
  if (serviceurl != NULL) {
    set_has_serviceurl();
  } else {
    clear_has_serviceurl();
  }
  serviceurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serviceurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.CanalInfo.serviceUrl)
}

// optional string iosUrl = 9;
inline bool CanalInfo::has_iosurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CanalInfo::set_has_iosurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CanalInfo::clear_has_iosurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CanalInfo::clear_iosurl() {
  iosurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iosurl();
}
inline const ::std::string& CanalInfo::iosurl() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.iosUrl)
  return iosurl_.GetNoArena();
}
inline void CanalInfo::set_iosurl(const ::std::string& value) {
  set_has_iosurl();
  iosurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.iosUrl)
}
#if LANG_CXX11
inline void CanalInfo::set_iosurl(::std::string&& value) {
  set_has_iosurl();
  iosurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.CanalInfo.iosUrl)
}
#endif
inline void CanalInfo::set_iosurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_iosurl();
  iosurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.CanalInfo.iosUrl)
}
inline void CanalInfo::set_iosurl(const char* value, size_t size) {
  set_has_iosurl();
  iosurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.CanalInfo.iosUrl)
}
inline ::std::string* CanalInfo::mutable_iosurl() {
  set_has_iosurl();
  // @@protoc_insertion_point(field_mutable:Tnode.CanalInfo.iosUrl)
  return iosurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CanalInfo::release_iosurl() {
  // @@protoc_insertion_point(field_release:Tnode.CanalInfo.iosUrl)
  clear_has_iosurl();
  return iosurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CanalInfo::set_allocated_iosurl(::std::string* iosurl) {
  if (iosurl != NULL) {
    set_has_iosurl();
  } else {
    clear_has_iosurl();
  }
  iosurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iosurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.CanalInfo.iosUrl)
}

// optional int32 showWeb = 10;
inline bool CanalInfo::has_showweb() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CanalInfo::set_has_showweb() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CanalInfo::clear_has_showweb() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CanalInfo::clear_showweb() {
  showweb_ = 0;
  clear_has_showweb();
}
inline ::google::protobuf::int32 CanalInfo::showweb() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.showWeb)
  return showweb_;
}
inline void CanalInfo::set_showweb(::google::protobuf::int32 value) {
  set_has_showweb();
  showweb_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.showWeb)
}

// optional string webUrl = 11;
inline bool CanalInfo::has_weburl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CanalInfo::set_has_weburl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CanalInfo::clear_has_weburl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CanalInfo::clear_weburl() {
  weburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weburl();
}
inline const ::std::string& CanalInfo::weburl() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.webUrl)
  return weburl_.GetNoArena();
}
inline void CanalInfo::set_weburl(const ::std::string& value) {
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.webUrl)
}
#if LANG_CXX11
inline void CanalInfo::set_weburl(::std::string&& value) {
  set_has_weburl();
  weburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.CanalInfo.webUrl)
}
#endif
inline void CanalInfo::set_weburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.CanalInfo.webUrl)
}
inline void CanalInfo::set_weburl(const char* value, size_t size) {
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.CanalInfo.webUrl)
}
inline ::std::string* CanalInfo::mutable_weburl() {
  set_has_weburl();
  // @@protoc_insertion_point(field_mutable:Tnode.CanalInfo.webUrl)
  return weburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CanalInfo::release_weburl() {
  // @@protoc_insertion_point(field_release:Tnode.CanalInfo.webUrl)
  clear_has_weburl();
  return weburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CanalInfo::set_allocated_weburl(::std::string* weburl) {
  if (weburl != NULL) {
    set_has_weburl();
  } else {
    clear_has_weburl();
  }
  weburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weburl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.CanalInfo.webUrl)
}

// optional int32 allowGuestLogin = 12;
inline bool CanalInfo::has_allowguestlogin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CanalInfo::set_has_allowguestlogin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CanalInfo::clear_has_allowguestlogin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CanalInfo::clear_allowguestlogin() {
  allowguestlogin_ = 0;
  clear_has_allowguestlogin();
}
inline ::google::protobuf::int32 CanalInfo::allowguestlogin() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.allowGuestLogin)
  return allowguestlogin_;
}
inline void CanalInfo::set_allowguestlogin(::google::protobuf::int32 value) {
  set_has_allowguestlogin();
  allowguestlogin_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.allowGuestLogin)
}

// -------------------------------------------------------------------

// LobbyInfo

// optional int32 platformId = 1;
inline bool LobbyInfo::has_platformid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LobbyInfo::set_has_platformid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LobbyInfo::clear_has_platformid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LobbyInfo::clear_platformid() {
  platformid_ = 0;
  clear_has_platformid();
}
inline ::google::protobuf::int32 LobbyInfo::platformid() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.platformId)
  return platformid_;
}
inline void LobbyInfo::set_platformid(::google::protobuf::int32 value) {
  set_has_platformid();
  platformid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.platformId)
}

// optional int32 gameId = 2;
inline bool LobbyInfo::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LobbyInfo::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LobbyInfo::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LobbyInfo::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 LobbyInfo::gameid() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.gameId)
  return gameid_;
}
inline void LobbyInfo::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.gameId)
}

// optional int32 canalId = 3;
inline bool LobbyInfo::has_canalid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LobbyInfo::set_has_canalid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LobbyInfo::clear_has_canalid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LobbyInfo::clear_canalid() {
  canalid_ = 0;
  clear_has_canalid();
}
inline ::google::protobuf::int32 LobbyInfo::canalid() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.canalId)
  return canalid_;
}
inline void LobbyInfo::set_canalid(::google::protobuf::int32 value) {
  set_has_canalid();
  canalid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.canalId)
}

// optional int32 clientVer = 4;
inline bool LobbyInfo::has_clientver() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LobbyInfo::set_has_clientver() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LobbyInfo::clear_has_clientver() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LobbyInfo::clear_clientver() {
  clientver_ = 0;
  clear_has_clientver();
}
inline ::google::protobuf::int32 LobbyInfo::clientver() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.clientVer)
  return clientver_;
}
inline void LobbyInfo::set_clientver(::google::protobuf::int32 value) {
  set_has_clientver();
  clientver_ = value;
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.clientVer)
}

// optional int32 resVer = 5;
inline bool LobbyInfo::has_resver() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LobbyInfo::set_has_resver() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LobbyInfo::clear_has_resver() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LobbyInfo::clear_resver() {
  resver_ = 0;
  clear_has_resver();
}
inline ::google::protobuf::int32 LobbyInfo::resver() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.resVer)
  return resver_;
}
inline void LobbyInfo::set_resver(::google::protobuf::int32 value) {
  set_has_resver();
  resver_ = value;
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.resVer)
}

// optional string downloadUrl = 6;
inline bool LobbyInfo::has_downloadurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LobbyInfo::set_has_downloadurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LobbyInfo::clear_has_downloadurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LobbyInfo::clear_downloadurl() {
  downloadurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_downloadurl();
}
inline const ::std::string& LobbyInfo::downloadurl() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.downloadUrl)
  return downloadurl_.GetNoArena();
}
inline void LobbyInfo::set_downloadurl(const ::std::string& value) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.downloadUrl)
}
#if LANG_CXX11
inline void LobbyInfo::set_downloadurl(::std::string&& value) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.LobbyInfo.downloadUrl)
}
#endif
inline void LobbyInfo::set_downloadurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.LobbyInfo.downloadUrl)
}
inline void LobbyInfo::set_downloadurl(const char* value, size_t size) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.LobbyInfo.downloadUrl)
}
inline ::std::string* LobbyInfo::mutable_downloadurl() {
  set_has_downloadurl();
  // @@protoc_insertion_point(field_mutable:Tnode.LobbyInfo.downloadUrl)
  return downloadurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LobbyInfo::release_downloadurl() {
  // @@protoc_insertion_point(field_release:Tnode.LobbyInfo.downloadUrl)
  clear_has_downloadurl();
  return downloadurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LobbyInfo::set_allocated_downloadurl(::std::string* downloadurl) {
  if (downloadurl != NULL) {
    set_has_downloadurl();
  } else {
    clear_has_downloadurl();
  }
  downloadurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), downloadurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.LobbyInfo.downloadUrl)
}

// optional string downGameUrl = 7;
inline bool LobbyInfo::has_downgameurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LobbyInfo::set_has_downgameurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LobbyInfo::clear_has_downgameurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LobbyInfo::clear_downgameurl() {
  downgameurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_downgameurl();
}
inline const ::std::string& LobbyInfo::downgameurl() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.downGameUrl)
  return downgameurl_.GetNoArena();
}
inline void LobbyInfo::set_downgameurl(const ::std::string& value) {
  set_has_downgameurl();
  downgameurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.downGameUrl)
}
#if LANG_CXX11
inline void LobbyInfo::set_downgameurl(::std::string&& value) {
  set_has_downgameurl();
  downgameurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.LobbyInfo.downGameUrl)
}
#endif
inline void LobbyInfo::set_downgameurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_downgameurl();
  downgameurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.LobbyInfo.downGameUrl)
}
inline void LobbyInfo::set_downgameurl(const char* value, size_t size) {
  set_has_downgameurl();
  downgameurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.LobbyInfo.downGameUrl)
}
inline ::std::string* LobbyInfo::mutable_downgameurl() {
  set_has_downgameurl();
  // @@protoc_insertion_point(field_mutable:Tnode.LobbyInfo.downGameUrl)
  return downgameurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LobbyInfo::release_downgameurl() {
  // @@protoc_insertion_point(field_release:Tnode.LobbyInfo.downGameUrl)
  clear_has_downgameurl();
  return downgameurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LobbyInfo::set_allocated_downgameurl(::std::string* downgameurl) {
  if (downgameurl != NULL) {
    set_has_downgameurl();
  } else {
    clear_has_downgameurl();
  }
  downgameurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), downgameurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.LobbyInfo.downGameUrl)
}

// -------------------------------------------------------------------

// NodeInfo

// optional string ip = 1;
inline bool NodeInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& NodeInfo::ip() const {
  // @@protoc_insertion_point(field_get:Tnode.NodeInfo.ip)
  return ip_.GetNoArena();
}
inline void NodeInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.NodeInfo.ip)
}
#if LANG_CXX11
inline void NodeInfo::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.NodeInfo.ip)
}
#endif
inline void NodeInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.NodeInfo.ip)
}
inline void NodeInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.NodeInfo.ip)
}
inline ::std::string* NodeInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:Tnode.NodeInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_ip() {
  // @@protoc_insertion_point(field_release:Tnode.NodeInfo.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Tnode.NodeInfo.ip)
}

// optional int32 port = 2;
inline bool NodeInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 NodeInfo::port() const {
  // @@protoc_insertion_point(field_get:Tnode.NodeInfo.port)
  return port_;
}
inline void NodeInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:Tnode.NodeInfo.port)
}

// -------------------------------------------------------------------

// NodeGroup

// optional int32 canalId = 1;
inline bool NodeGroup::has_canalid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeGroup::set_has_canalid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeGroup::clear_has_canalid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeGroup::clear_canalid() {
  canalid_ = 0;
  clear_has_canalid();
}
inline ::google::protobuf::int32 NodeGroup::canalid() const {
  // @@protoc_insertion_point(field_get:Tnode.NodeGroup.canalId)
  return canalid_;
}
inline void NodeGroup::set_canalid(::google::protobuf::int32 value) {
  set_has_canalid();
  canalid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.NodeGroup.canalId)
}

// optional int32 vipLevel = 2;
inline bool NodeGroup::has_viplevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeGroup::set_has_viplevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeGroup::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeGroup::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 NodeGroup::viplevel() const {
  // @@protoc_insertion_point(field_get:Tnode.NodeGroup.vipLevel)
  return viplevel_;
}
inline void NodeGroup::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:Tnode.NodeGroup.vipLevel)
}

// repeated .Tnode.NodeInfo nodes = 3;
inline int NodeGroup::nodes_size() const {
  return nodes_.size();
}
inline void NodeGroup::clear_nodes() {
  nodes_.Clear();
}
inline const ::Tnode::NodeInfo& NodeGroup::nodes(int index) const {
  // @@protoc_insertion_point(field_get:Tnode.NodeGroup.nodes)
  return nodes_.Get(index);
}
inline ::Tnode::NodeInfo* NodeGroup::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:Tnode.NodeGroup.nodes)
  return nodes_.Mutable(index);
}
inline ::Tnode::NodeInfo* NodeGroup::add_nodes() {
  // @@protoc_insertion_point(field_add:Tnode.NodeGroup.nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Tnode::NodeInfo >*
NodeGroup::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:Tnode.NodeGroup.nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Tnode::NodeInfo >&
NodeGroup::nodes() const {
  // @@protoc_insertion_point(field_list:Tnode.NodeGroup.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// AckNodeInfo

// optional .Tnode.PlatformInfo platform = 1;
inline bool AckNodeInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckNodeInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckNodeInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckNodeInfo::clear_platform() {
  if (platform_ != NULL) platform_->::Tnode::PlatformInfo::Clear();
  clear_has_platform();
}
inline const ::Tnode::PlatformInfo& AckNodeInfo::platform() const {
  // @@protoc_insertion_point(field_get:Tnode.AckNodeInfo.platform)
  return platform_ != NULL ? *platform_
                         : *::Tnode::PlatformInfo::internal_default_instance();
}
inline ::Tnode::PlatformInfo* AckNodeInfo::mutable_platform() {
  set_has_platform();
  if (platform_ == NULL) {
    platform_ = new ::Tnode::PlatformInfo;
  }
  // @@protoc_insertion_point(field_mutable:Tnode.AckNodeInfo.platform)
  return platform_;
}
inline ::Tnode::PlatformInfo* AckNodeInfo::release_platform() {
  // @@protoc_insertion_point(field_release:Tnode.AckNodeInfo.platform)
  clear_has_platform();
  ::Tnode::PlatformInfo* temp = platform_;
  platform_ = NULL;
  return temp;
}
inline void AckNodeInfo::set_allocated_platform(::Tnode::PlatformInfo* platform) {
  delete platform_;
  platform_ = platform;
  if (platform) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  // @@protoc_insertion_point(field_set_allocated:Tnode.AckNodeInfo.platform)
}

// repeated .Tnode.LobbyInfo lobbys = 2;
inline int AckNodeInfo::lobbys_size() const {
  return lobbys_.size();
}
inline void AckNodeInfo::clear_lobbys() {
  lobbys_.Clear();
}
inline const ::Tnode::LobbyInfo& AckNodeInfo::lobbys(int index) const {
  // @@protoc_insertion_point(field_get:Tnode.AckNodeInfo.lobbys)
  return lobbys_.Get(index);
}
inline ::Tnode::LobbyInfo* AckNodeInfo::mutable_lobbys(int index) {
  // @@protoc_insertion_point(field_mutable:Tnode.AckNodeInfo.lobbys)
  return lobbys_.Mutable(index);
}
inline ::Tnode::LobbyInfo* AckNodeInfo::add_lobbys() {
  // @@protoc_insertion_point(field_add:Tnode.AckNodeInfo.lobbys)
  return lobbys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Tnode::LobbyInfo >*
AckNodeInfo::mutable_lobbys() {
  // @@protoc_insertion_point(field_mutable_list:Tnode.AckNodeInfo.lobbys)
  return &lobbys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Tnode::LobbyInfo >&
AckNodeInfo::lobbys() const {
  // @@protoc_insertion_point(field_list:Tnode.AckNodeInfo.lobbys)
  return lobbys_;
}

// repeated .Tnode.CanalInfo canals = 3;
inline int AckNodeInfo::canals_size() const {
  return canals_.size();
}
inline void AckNodeInfo::clear_canals() {
  canals_.Clear();
}
inline const ::Tnode::CanalInfo& AckNodeInfo::canals(int index) const {
  // @@protoc_insertion_point(field_get:Tnode.AckNodeInfo.canals)
  return canals_.Get(index);
}
inline ::Tnode::CanalInfo* AckNodeInfo::mutable_canals(int index) {
  // @@protoc_insertion_point(field_mutable:Tnode.AckNodeInfo.canals)
  return canals_.Mutable(index);
}
inline ::Tnode::CanalInfo* AckNodeInfo::add_canals() {
  // @@protoc_insertion_point(field_add:Tnode.AckNodeInfo.canals)
  return canals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Tnode::CanalInfo >*
AckNodeInfo::mutable_canals() {
  // @@protoc_insertion_point(field_mutable_list:Tnode.AckNodeInfo.canals)
  return &canals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Tnode::CanalInfo >&
AckNodeInfo::canals() const {
  // @@protoc_insertion_point(field_list:Tnode.AckNodeInfo.canals)
  return canals_;
}

// repeated .Tnode.NodeGroup nodeGroups = 4;
inline int AckNodeInfo::nodegroups_size() const {
  return nodegroups_.size();
}
inline void AckNodeInfo::clear_nodegroups() {
  nodegroups_.Clear();
}
inline const ::Tnode::NodeGroup& AckNodeInfo::nodegroups(int index) const {
  // @@protoc_insertion_point(field_get:Tnode.AckNodeInfo.nodeGroups)
  return nodegroups_.Get(index);
}
inline ::Tnode::NodeGroup* AckNodeInfo::mutable_nodegroups(int index) {
  // @@protoc_insertion_point(field_mutable:Tnode.AckNodeInfo.nodeGroups)
  return nodegroups_.Mutable(index);
}
inline ::Tnode::NodeGroup* AckNodeInfo::add_nodegroups() {
  // @@protoc_insertion_point(field_add:Tnode.AckNodeInfo.nodeGroups)
  return nodegroups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Tnode::NodeGroup >*
AckNodeInfo::mutable_nodegroups() {
  // @@protoc_insertion_point(field_mutable_list:Tnode.AckNodeInfo.nodeGroups)
  return &nodegroups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Tnode::NodeGroup >&
AckNodeInfo::nodegroups() const {
  // @@protoc_insertion_point(field_list:Tnode.AckNodeInfo.nodeGroups)
  return nodegroups_;
}

// -------------------------------------------------------------------

// ReqQueryUser

// optional string loginAcc = 1;
inline bool ReqQueryUser::has_loginacc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqQueryUser::set_has_loginacc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqQueryUser::clear_has_loginacc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqQueryUser::clear_loginacc() {
  loginacc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_loginacc();
}
inline const ::std::string& ReqQueryUser::loginacc() const {
  // @@protoc_insertion_point(field_get:Tnode.ReqQueryUser.loginAcc)
  return loginacc_.GetNoArena();
}
inline void ReqQueryUser::set_loginacc(const ::std::string& value) {
  set_has_loginacc();
  loginacc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.ReqQueryUser.loginAcc)
}
#if LANG_CXX11
inline void ReqQueryUser::set_loginacc(::std::string&& value) {
  set_has_loginacc();
  loginacc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.ReqQueryUser.loginAcc)
}
#endif
inline void ReqQueryUser::set_loginacc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_loginacc();
  loginacc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.ReqQueryUser.loginAcc)
}
inline void ReqQueryUser::set_loginacc(const char* value, size_t size) {
  set_has_loginacc();
  loginacc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.ReqQueryUser.loginAcc)
}
inline ::std::string* ReqQueryUser::mutable_loginacc() {
  set_has_loginacc();
  // @@protoc_insertion_point(field_mutable:Tnode.ReqQueryUser.loginAcc)
  return loginacc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqQueryUser::release_loginacc() {
  // @@protoc_insertion_point(field_release:Tnode.ReqQueryUser.loginAcc)
  clear_has_loginacc();
  return loginacc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqQueryUser::set_allocated_loginacc(::std::string* loginacc) {
  if (loginacc != NULL) {
    set_has_loginacc();
  } else {
    clear_has_loginacc();
  }
  loginacc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginacc);
  // @@protoc_insertion_point(field_set_allocated:Tnode.ReqQueryUser.loginAcc)
}

// optional int32 canalId = 2;
inline bool ReqQueryUser::has_canalid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqQueryUser::set_has_canalid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqQueryUser::clear_has_canalid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqQueryUser::clear_canalid() {
  canalid_ = 0;
  clear_has_canalid();
}
inline ::google::protobuf::int32 ReqQueryUser::canalid() const {
  // @@protoc_insertion_point(field_get:Tnode.ReqQueryUser.canalId)
  return canalid_;
}
inline void ReqQueryUser::set_canalid(::google::protobuf::int32 value) {
  set_has_canalid();
  canalid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.ReqQueryUser.canalId)
}

// -------------------------------------------------------------------

// AckQueryUser

// optional int32 canalId = 1;
inline bool AckQueryUser::has_canalid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckQueryUser::set_has_canalid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckQueryUser::clear_has_canalid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckQueryUser::clear_canalid() {
  canalid_ = 0;
  clear_has_canalid();
}
inline ::google::protobuf::int32 AckQueryUser::canalid() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.canalId)
  return canalid_;
}
inline void AckQueryUser::set_canalid(::google::protobuf::int32 value) {
  set_has_canalid();
  canalid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.canalId)
}

// optional int32 platformId = 2;
inline bool AckQueryUser::has_platformid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckQueryUser::set_has_platformid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckQueryUser::clear_has_platformid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckQueryUser::clear_platformid() {
  platformid_ = 0;
  clear_has_platformid();
}
inline ::google::protobuf::int32 AckQueryUser::platformid() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.platformId)
  return platformid_;
}
inline void AckQueryUser::set_platformid(::google::protobuf::int32 value) {
  set_has_platformid();
  platformid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.platformId)
}

// optional string loginAcc = 3;
inline bool AckQueryUser::has_loginacc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckQueryUser::set_has_loginacc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckQueryUser::clear_has_loginacc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckQueryUser::clear_loginacc() {
  loginacc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_loginacc();
}
inline const ::std::string& AckQueryUser::loginacc() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.loginAcc)
  return loginacc_.GetNoArena();
}
inline void AckQueryUser::set_loginacc(const ::std::string& value) {
  set_has_loginacc();
  loginacc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.loginAcc)
}
#if LANG_CXX11
inline void AckQueryUser::set_loginacc(::std::string&& value) {
  set_has_loginacc();
  loginacc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.AckQueryUser.loginAcc)
}
#endif
inline void AckQueryUser::set_loginacc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_loginacc();
  loginacc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.AckQueryUser.loginAcc)
}
inline void AckQueryUser::set_loginacc(const char* value, size_t size) {
  set_has_loginacc();
  loginacc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.AckQueryUser.loginAcc)
}
inline ::std::string* AckQueryUser::mutable_loginacc() {
  set_has_loginacc();
  // @@protoc_insertion_point(field_mutable:Tnode.AckQueryUser.loginAcc)
  return loginacc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckQueryUser::release_loginacc() {
  // @@protoc_insertion_point(field_release:Tnode.AckQueryUser.loginAcc)
  clear_has_loginacc();
  return loginacc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckQueryUser::set_allocated_loginacc(::std::string* loginacc) {
  if (loginacc != NULL) {
    set_has_loginacc();
  } else {
    clear_has_loginacc();
  }
  loginacc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginacc);
  // @@protoc_insertion_point(field_set_allocated:Tnode.AckQueryUser.loginAcc)
}

// optional uint32 userId = 4;
inline bool AckQueryUser::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckQueryUser::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckQueryUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckQueryUser::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 AckQueryUser::userid() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.userId)
  return userid_;
}
inline void AckQueryUser::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.userId)
}

// optional string nickName = 5;
inline bool AckQueryUser::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckQueryUser::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckQueryUser::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckQueryUser::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& AckQueryUser::nickname() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.nickName)
  return nickname_.GetNoArena();
}
inline void AckQueryUser::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.nickName)
}
#if LANG_CXX11
inline void AckQueryUser::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.AckQueryUser.nickName)
}
#endif
inline void AckQueryUser::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.AckQueryUser.nickName)
}
inline void AckQueryUser::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.AckQueryUser.nickName)
}
inline ::std::string* AckQueryUser::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:Tnode.AckQueryUser.nickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckQueryUser::release_nickname() {
  // @@protoc_insertion_point(field_release:Tnode.AckQueryUser.nickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckQueryUser::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:Tnode.AckQueryUser.nickName)
}

// optional int32 vipLevel = 6;
inline bool AckQueryUser::has_viplevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckQueryUser::set_has_viplevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckQueryUser::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckQueryUser::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 AckQueryUser::viplevel() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.vipLevel)
  return viplevel_;
}
inline void AckQueryUser::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.vipLevel)
}

// optional int32 regTime = 7;
inline bool AckQueryUser::has_regtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckQueryUser::set_has_regtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckQueryUser::clear_has_regtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckQueryUser::clear_regtime() {
  regtime_ = 0;
  clear_has_regtime();
}
inline ::google::protobuf::int32 AckQueryUser::regtime() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.regTime)
  return regtime_;
}
inline void AckQueryUser::set_regtime(::google::protobuf::int32 value) {
  set_has_regtime();
  regtime_ = value;
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.regTime)
}

// -------------------------------------------------------------------

// ReqReloadData

// optional int32 opcode = 1;
inline bool ReqReloadData::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqReloadData::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqReloadData::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqReloadData::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 ReqReloadData::opcode() const {
  // @@protoc_insertion_point(field_get:Tnode.ReqReloadData.opcode)
  return opcode_;
}
inline void ReqReloadData::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:Tnode.ReqReloadData.opcode)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Tnode

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2ftnode_2eproto__INCLUDED
