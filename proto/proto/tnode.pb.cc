// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/tnode.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/tnode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Tnode {
class ReqNodeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqNodeInfo> {
} _ReqNodeInfo_default_instance_;
class PlatformInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlatformInfo> {
} _PlatformInfo_default_instance_;
class CanalInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CanalInfo> {
} _CanalInfo_default_instance_;
class LobbyInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LobbyInfo> {
} _LobbyInfo_default_instance_;
class NodeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeInfo> {
} _NodeInfo_default_instance_;
class NodeGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeGroup> {
} _NodeGroup_default_instance_;
class AckNodeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AckNodeInfo> {
} _AckNodeInfo_default_instance_;
class ReqQueryUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqQueryUser> {
} _ReqQueryUser_default_instance_;
class AckQueryUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AckQueryUser> {
} _AckQueryUser_default_instance_;
class ReqReloadDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqReloadData> {
} _ReqReloadData_default_instance_;

namespace protobuf_proto_2ftnode_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNodeInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, platformid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, platformname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, homeurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, resurl_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, platformid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, canalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, canalname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, isappstore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, allowweixinlogin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, showguide_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, advurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, serviceurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, iosurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, showweb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, weburl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanalInfo, allowguestlogin_),
  5,
  6,
  0,
  7,
  8,
  9,
  1,
  2,
  3,
  10,
  4,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyInfo, platformid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyInfo, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyInfo, canalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyInfo, clientver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyInfo, resver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyInfo, downloadurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyInfo, downgameurl_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeGroup, canalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeGroup, viplevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeGroup, nodes_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNodeInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNodeInfo, platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNodeInfo, lobbys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNodeInfo, canals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNodeInfo, nodegroups_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryUser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryUser, loginacc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQueryUser, canalid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryUser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryUser, canalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryUser, platformid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryUser, loginacc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryUser, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryUser, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryUser, viplevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQueryUser, regtime_),
  2,
  3,
  0,
  4,
  1,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReloadData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReloadData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReloadData, opcode_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 5, sizeof(ReqNodeInfo)},
  { 5, 14, sizeof(PlatformInfo)},
  { 18, 35, sizeof(CanalInfo)},
  { 47, 59, sizeof(LobbyInfo)},
  { 66, 73, sizeof(NodeInfo)},
  { 75, 83, sizeof(NodeGroup)},
  { 86, 95, sizeof(AckNodeInfo)},
  { 99, 106, sizeof(ReqQueryUser)},
  { 108, 120, sizeof(AckQueryUser)},
  { 127, 133, sizeof(ReqReloadData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqNodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlatformInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CanalInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LobbyInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AckNodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqQueryUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AckQueryUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqReloadData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto/tnode.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _ReqNodeInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PlatformInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CanalInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LobbyInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _NodeInfo_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _NodeGroup_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _AckNodeInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ReqQueryUser_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _AckQueryUser_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ReqReloadData_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ReqNodeInfo_default_instance_.DefaultConstruct();
  _PlatformInfo_default_instance_.DefaultConstruct();
  _CanalInfo_default_instance_.DefaultConstruct();
  _LobbyInfo_default_instance_.DefaultConstruct();
  _NodeInfo_default_instance_.DefaultConstruct();
  _NodeGroup_default_instance_.DefaultConstruct();
  _AckNodeInfo_default_instance_.DefaultConstruct();
  _ReqQueryUser_default_instance_.DefaultConstruct();
  _AckQueryUser_default_instance_.DefaultConstruct();
  _ReqReloadData_default_instance_.DefaultConstruct();
  _AckNodeInfo_default_instance_.get_mutable()->platform_ = const_cast< ::Tnode::PlatformInfo*>(
      ::Tnode::PlatformInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021proto/tnode.proto\022\005Tnode\"\r\n\013ReqNodeInf"
      "o\"Y\n\014PlatformInfo\022\022\n\nplatformId\030\001 \001(\005\022\024\n"
      "\014platformName\030\002 \001(\t\022\017\n\007homeUrl\030\003 \001(\t\022\016\n\006"
      "resUrl\030\004 \001(\t\"\362\001\n\tCanalInfo\022\022\n\nplatformId"
      "\030\001 \001(\005\022\017\n\007canalId\030\002 \001(\005\022\021\n\tcanalName\030\003 \001"
      "(\t\022\022\n\nisAppStore\030\004 \001(\005\022\030\n\020allowWeiXinLog"
      "in\030\005 \001(\005\022\021\n\tshowGuide\030\006 \001(\005\022\016\n\006advUrl\030\007 "
      "\001(\t\022\022\n\nserviceUrl\030\010 \001(\t\022\016\n\006iosUrl\030\t \001(\t\022"
      "\017\n\007showWeb\030\n \001(\005\022\016\n\006webUrl\030\013 \001(\t\022\027\n\017allo"
      "wGuestLogin\030\014 \001(\005\"\215\001\n\tLobbyInfo\022\022\n\nplatf"
      "ormId\030\001 \001(\005\022\016\n\006gameId\030\002 \001(\005\022\017\n\007canalId\030\003"
      " \001(\005\022\021\n\tclientVer\030\004 \001(\005\022\016\n\006resVer\030\005 \001(\005\022"
      "\023\n\013downloadUrl\030\006 \001(\t\022\023\n\013downGameUrl\030\007 \001("
      "\t\"$\n\010NodeInfo\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\""
      "N\n\tNodeGroup\022\017\n\007canalId\030\001 \001(\005\022\020\n\010vipLeve"
      "l\030\002 \001(\005\022\036\n\005nodes\030\003 \003(\0132\017.Tnode.NodeInfo\""
      "\236\001\n\013AckNodeInfo\022%\n\010platform\030\001 \001(\0132\023.Tnod"
      "e.PlatformInfo\022 \n\006lobbys\030\002 \003(\0132\020.Tnode.L"
      "obbyInfo\022 \n\006canals\030\003 \003(\0132\020.Tnode.CanalIn"
      "fo\022$\n\nnodeGroups\030\004 \003(\0132\020.Tnode.NodeGroup"
      "\"1\n\014ReqQueryUser\022\020\n\010loginAcc\030\001 \001(\t\022\017\n\007ca"
      "nalId\030\002 \001(\005\"\212\001\n\014AckQueryUser\022\017\n\007canalId\030"
      "\001 \001(\005\022\022\n\nplatformId\030\002 \001(\005\022\020\n\010loginAcc\030\003 "
      "\001(\t\022\016\n\006userId\030\004 \001(\r\022\020\n\010nickName\030\005 \001(\t\022\020\n"
      "\010vipLevel\030\006 \001(\005\022\017\n\007regTime\030\007 \001(\005\"\037\n\rReqR"
      "eloadData\022\016\n\006opcode\030\001 \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1025);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/tnode.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_proto_2ftnode_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqNodeInfo::ReqNodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2ftnode_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tnode.ReqNodeInfo)
}
ReqNodeInfo::ReqNodeInfo(const ReqNodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Tnode.ReqNodeInfo)
}

void ReqNodeInfo::SharedCtor() {
  _cached_size_ = 0;
}

ReqNodeInfo::~ReqNodeInfo() {
  // @@protoc_insertion_point(destructor:Tnode.ReqNodeInfo)
  SharedDtor();
}

void ReqNodeInfo::SharedDtor() {
}

void ReqNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqNodeInfo::descriptor() {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqNodeInfo& ReqNodeInfo::default_instance() {
  protobuf_proto_2ftnode_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqNodeInfo* ReqNodeInfo::New(::google::protobuf::Arena* arena) const {
  ReqNodeInfo* n = new ReqNodeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Tnode.ReqNodeInfo)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tnode.ReqNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Tnode.ReqNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tnode.ReqNodeInfo)
  return false;
#undef DO_
}

void ReqNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tnode.ReqNodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tnode.ReqNodeInfo)
}

::google::protobuf::uint8* ReqNodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tnode.ReqNodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tnode.ReqNodeInfo)
  return target;
}

size_t ReqNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tnode.ReqNodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tnode.ReqNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqNodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqNodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tnode.ReqNodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tnode.ReqNodeInfo)
    MergeFrom(*source);
  }
}

void ReqNodeInfo::MergeFrom(const ReqNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tnode.ReqNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tnode.ReqNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqNodeInfo::CopyFrom(const ReqNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tnode.ReqNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqNodeInfo::IsInitialized() const {
  return true;
}

void ReqNodeInfo::Swap(ReqNodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqNodeInfo::InternalSwap(ReqNodeInfo* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqNodeInfo::GetMetadata() const {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqNodeInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlatformInfo::kPlatformIdFieldNumber;
const int PlatformInfo::kPlatformNameFieldNumber;
const int PlatformInfo::kHomeUrlFieldNumber;
const int PlatformInfo::kResUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlatformInfo::PlatformInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2ftnode_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tnode.PlatformInfo)
}
PlatformInfo::PlatformInfo(const PlatformInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  platformname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platformname()) {
    platformname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platformname_);
  }
  homeurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_homeurl()) {
    homeurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.homeurl_);
  }
  resurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_resurl()) {
    resurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resurl_);
  }
  platformid_ = from.platformid_;
  // @@protoc_insertion_point(copy_constructor:Tnode.PlatformInfo)
}

void PlatformInfo::SharedCtor() {
  _cached_size_ = 0;
  platformname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  homeurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platformid_ = 0;
}

PlatformInfo::~PlatformInfo() {
  // @@protoc_insertion_point(destructor:Tnode.PlatformInfo)
  SharedDtor();
}

void PlatformInfo::SharedDtor() {
  platformname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  homeurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlatformInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlatformInfo::descriptor() {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlatformInfo& PlatformInfo::default_instance() {
  protobuf_proto_2ftnode_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlatformInfo* PlatformInfo::New(::google::protobuf::Arena* arena) const {
  PlatformInfo* n = new PlatformInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlatformInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Tnode.PlatformInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_platformname()) {
      GOOGLE_DCHECK(!platformname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*platformname_.UnsafeRawStringPointer())->clear();
    }
    if (has_homeurl()) {
      GOOGLE_DCHECK(!homeurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*homeurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_resurl()) {
      GOOGLE_DCHECK(!resurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*resurl_.UnsafeRawStringPointer())->clear();
    }
  }
  platformid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlatformInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tnode.PlatformInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 platformId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_platformid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platformid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string platformName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platformname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platformname().data(), this->platformname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.PlatformInfo.platformName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string homeUrl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_homeurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->homeurl().data(), this->homeurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.PlatformInfo.homeUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string resUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resurl().data(), this->resurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.PlatformInfo.resUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tnode.PlatformInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tnode.PlatformInfo)
  return false;
#undef DO_
}

void PlatformInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tnode.PlatformInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 platformId = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->platformid(), output);
  }

  // optional string platformName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platformname().data(), this->platformname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.PlatformInfo.platformName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->platformname(), output);
  }

  // optional string homeUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->homeurl().data(), this->homeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.PlatformInfo.homeUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->homeurl(), output);
  }

  // optional string resUrl = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resurl().data(), this->resurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.PlatformInfo.resUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->resurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tnode.PlatformInfo)
}

::google::protobuf::uint8* PlatformInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tnode.PlatformInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 platformId = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->platformid(), target);
  }

  // optional string platformName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platformname().data(), this->platformname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.PlatformInfo.platformName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platformname(), target);
  }

  // optional string homeUrl = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->homeurl().data(), this->homeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.PlatformInfo.homeUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->homeurl(), target);
  }

  // optional string resUrl = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resurl().data(), this->resurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.PlatformInfo.resUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tnode.PlatformInfo)
  return target;
}

size_t PlatformInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tnode.PlatformInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string platformName = 2;
    if (has_platformname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platformname());
    }

    // optional string homeUrl = 3;
    if (has_homeurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->homeurl());
    }

    // optional string resUrl = 4;
    if (has_resurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resurl());
    }

    // optional int32 platformId = 1;
    if (has_platformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platformid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlatformInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tnode.PlatformInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlatformInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlatformInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tnode.PlatformInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tnode.PlatformInfo)
    MergeFrom(*source);
  }
}

void PlatformInfo::MergeFrom(const PlatformInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tnode.PlatformInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_platformname();
      platformname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platformname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_homeurl();
      homeurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.homeurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_resurl();
      resurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      platformid_ = from.platformid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlatformInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tnode.PlatformInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlatformInfo::CopyFrom(const PlatformInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tnode.PlatformInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatformInfo::IsInitialized() const {
  return true;
}

void PlatformInfo::Swap(PlatformInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlatformInfo::InternalSwap(PlatformInfo* other) {
  platformname_.Swap(&other->platformname_);
  homeurl_.Swap(&other->homeurl_);
  resurl_.Swap(&other->resurl_);
  std::swap(platformid_, other->platformid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlatformInfo::GetMetadata() const {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlatformInfo

// optional int32 platformId = 1;
bool PlatformInfo::has_platformid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlatformInfo::set_has_platformid() {
  _has_bits_[0] |= 0x00000008u;
}
void PlatformInfo::clear_has_platformid() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlatformInfo::clear_platformid() {
  platformid_ = 0;
  clear_has_platformid();
}
::google::protobuf::int32 PlatformInfo::platformid() const {
  // @@protoc_insertion_point(field_get:Tnode.PlatformInfo.platformId)
  return platformid_;
}
void PlatformInfo::set_platformid(::google::protobuf::int32 value) {
  set_has_platformid();
  platformid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.PlatformInfo.platformId)
}

// optional string platformName = 2;
bool PlatformInfo::has_platformname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlatformInfo::set_has_platformname() {
  _has_bits_[0] |= 0x00000001u;
}
void PlatformInfo::clear_has_platformname() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlatformInfo::clear_platformname() {
  platformname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platformname();
}
const ::std::string& PlatformInfo::platformname() const {
  // @@protoc_insertion_point(field_get:Tnode.PlatformInfo.platformName)
  return platformname_.GetNoArena();
}
void PlatformInfo::set_platformname(const ::std::string& value) {
  set_has_platformname();
  platformname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.PlatformInfo.platformName)
}
#if LANG_CXX11
void PlatformInfo::set_platformname(::std::string&& value) {
  set_has_platformname();
  platformname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.PlatformInfo.platformName)
}
#endif
void PlatformInfo::set_platformname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platformname();
  platformname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.PlatformInfo.platformName)
}
void PlatformInfo::set_platformname(const char* value, size_t size) {
  set_has_platformname();
  platformname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.PlatformInfo.platformName)
}
::std::string* PlatformInfo::mutable_platformname() {
  set_has_platformname();
  // @@protoc_insertion_point(field_mutable:Tnode.PlatformInfo.platformName)
  return platformname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlatformInfo::release_platformname() {
  // @@protoc_insertion_point(field_release:Tnode.PlatformInfo.platformName)
  clear_has_platformname();
  return platformname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlatformInfo::set_allocated_platformname(::std::string* platformname) {
  if (platformname != NULL) {
    set_has_platformname();
  } else {
    clear_has_platformname();
  }
  platformname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platformname);
  // @@protoc_insertion_point(field_set_allocated:Tnode.PlatformInfo.platformName)
}

// optional string homeUrl = 3;
bool PlatformInfo::has_homeurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlatformInfo::set_has_homeurl() {
  _has_bits_[0] |= 0x00000002u;
}
void PlatformInfo::clear_has_homeurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlatformInfo::clear_homeurl() {
  homeurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_homeurl();
}
const ::std::string& PlatformInfo::homeurl() const {
  // @@protoc_insertion_point(field_get:Tnode.PlatformInfo.homeUrl)
  return homeurl_.GetNoArena();
}
void PlatformInfo::set_homeurl(const ::std::string& value) {
  set_has_homeurl();
  homeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.PlatformInfo.homeUrl)
}
#if LANG_CXX11
void PlatformInfo::set_homeurl(::std::string&& value) {
  set_has_homeurl();
  homeurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.PlatformInfo.homeUrl)
}
#endif
void PlatformInfo::set_homeurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_homeurl();
  homeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.PlatformInfo.homeUrl)
}
void PlatformInfo::set_homeurl(const char* value, size_t size) {
  set_has_homeurl();
  homeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.PlatformInfo.homeUrl)
}
::std::string* PlatformInfo::mutable_homeurl() {
  set_has_homeurl();
  // @@protoc_insertion_point(field_mutable:Tnode.PlatformInfo.homeUrl)
  return homeurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlatformInfo::release_homeurl() {
  // @@protoc_insertion_point(field_release:Tnode.PlatformInfo.homeUrl)
  clear_has_homeurl();
  return homeurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlatformInfo::set_allocated_homeurl(::std::string* homeurl) {
  if (homeurl != NULL) {
    set_has_homeurl();
  } else {
    clear_has_homeurl();
  }
  homeurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), homeurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.PlatformInfo.homeUrl)
}

// optional string resUrl = 4;
bool PlatformInfo::has_resurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlatformInfo::set_has_resurl() {
  _has_bits_[0] |= 0x00000004u;
}
void PlatformInfo::clear_has_resurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlatformInfo::clear_resurl() {
  resurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resurl();
}
const ::std::string& PlatformInfo::resurl() const {
  // @@protoc_insertion_point(field_get:Tnode.PlatformInfo.resUrl)
  return resurl_.GetNoArena();
}
void PlatformInfo::set_resurl(const ::std::string& value) {
  set_has_resurl();
  resurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.PlatformInfo.resUrl)
}
#if LANG_CXX11
void PlatformInfo::set_resurl(::std::string&& value) {
  set_has_resurl();
  resurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.PlatformInfo.resUrl)
}
#endif
void PlatformInfo::set_resurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resurl();
  resurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.PlatformInfo.resUrl)
}
void PlatformInfo::set_resurl(const char* value, size_t size) {
  set_has_resurl();
  resurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.PlatformInfo.resUrl)
}
::std::string* PlatformInfo::mutable_resurl() {
  set_has_resurl();
  // @@protoc_insertion_point(field_mutable:Tnode.PlatformInfo.resUrl)
  return resurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlatformInfo::release_resurl() {
  // @@protoc_insertion_point(field_release:Tnode.PlatformInfo.resUrl)
  clear_has_resurl();
  return resurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlatformInfo::set_allocated_resurl(::std::string* resurl) {
  if (resurl != NULL) {
    set_has_resurl();
  } else {
    clear_has_resurl();
  }
  resurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.PlatformInfo.resUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CanalInfo::kPlatformIdFieldNumber;
const int CanalInfo::kCanalIdFieldNumber;
const int CanalInfo::kCanalNameFieldNumber;
const int CanalInfo::kIsAppStoreFieldNumber;
const int CanalInfo::kAllowWeiXinLoginFieldNumber;
const int CanalInfo::kShowGuideFieldNumber;
const int CanalInfo::kAdvUrlFieldNumber;
const int CanalInfo::kServiceUrlFieldNumber;
const int CanalInfo::kIosUrlFieldNumber;
const int CanalInfo::kShowWebFieldNumber;
const int CanalInfo::kWebUrlFieldNumber;
const int CanalInfo::kAllowGuestLoginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CanalInfo::CanalInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2ftnode_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tnode.CanalInfo)
}
CanalInfo::CanalInfo(const CanalInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  canalname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_canalname()) {
    canalname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canalname_);
  }
  advurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_advurl()) {
    advurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.advurl_);
  }
  serviceurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serviceurl()) {
    serviceurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serviceurl_);
  }
  iosurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_iosurl()) {
    iosurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iosurl_);
  }
  weburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weburl()) {
    weburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weburl_);
  }
  ::memcpy(&platformid_, &from.platformid_,
    reinterpret_cast<char*>(&allowguestlogin_) -
    reinterpret_cast<char*>(&platformid_) + sizeof(allowguestlogin_));
  // @@protoc_insertion_point(copy_constructor:Tnode.CanalInfo)
}

void CanalInfo::SharedCtor() {
  _cached_size_ = 0;
  canalname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  advurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serviceurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iosurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weburl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&platformid_, 0, reinterpret_cast<char*>(&allowguestlogin_) -
    reinterpret_cast<char*>(&platformid_) + sizeof(allowguestlogin_));
}

CanalInfo::~CanalInfo() {
  // @@protoc_insertion_point(destructor:Tnode.CanalInfo)
  SharedDtor();
}

void CanalInfo::SharedDtor() {
  canalname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  advurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serviceurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iosurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weburl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CanalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CanalInfo::descriptor() {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CanalInfo& CanalInfo::default_instance() {
  protobuf_proto_2ftnode_2eproto::InitDefaults();
  return *internal_default_instance();
}

CanalInfo* CanalInfo::New(::google::protobuf::Arena* arena) const {
  CanalInfo* n = new CanalInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CanalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Tnode.CanalInfo)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_canalname()) {
      GOOGLE_DCHECK(!canalname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*canalname_.UnsafeRawStringPointer())->clear();
    }
    if (has_advurl()) {
      GOOGLE_DCHECK(!advurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*advurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_serviceurl()) {
      GOOGLE_DCHECK(!serviceurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serviceurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_iosurl()) {
      GOOGLE_DCHECK(!iosurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*iosurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_weburl()) {
      GOOGLE_DCHECK(!weburl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weburl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&platformid_, 0, reinterpret_cast<char*>(&isappstore_) -
      reinterpret_cast<char*>(&platformid_) + sizeof(isappstore_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&allowweixinlogin_, 0, reinterpret_cast<char*>(&allowguestlogin_) -
      reinterpret_cast<char*>(&allowweixinlogin_) + sizeof(allowguestlogin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CanalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tnode.CanalInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 platformId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_platformid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platformid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 canalId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_canalid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string canalName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canalname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->canalname().data(), this->canalname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.CanalInfo.canalName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 isAppStore = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_isappstore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isappstore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 allowWeiXinLogin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_allowweixinlogin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allowweixinlogin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 showGuide = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_showguide();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showguide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string advUrl = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_advurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->advurl().data(), this->advurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.CanalInfo.advUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serviceUrl = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serviceurl().data(), this->serviceurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.CanalInfo.serviceUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string iosUrl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iosurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iosurl().data(), this->iosurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.CanalInfo.iosUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 showWeb = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_showweb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showweb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string webUrl = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weburl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weburl().data(), this->weburl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.CanalInfo.webUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 allowGuestLogin = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_allowguestlogin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allowguestlogin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tnode.CanalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tnode.CanalInfo)
  return false;
#undef DO_
}

void CanalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tnode.CanalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 platformId = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->platformid(), output);
  }

  // optional int32 canalId = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->canalid(), output);
  }

  // optional string canalName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->canalname().data(), this->canalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.CanalInfo.canalName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->canalname(), output);
  }

  // optional int32 isAppStore = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isappstore(), output);
  }

  // optional int32 allowWeiXinLogin = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->allowweixinlogin(), output);
  }

  // optional int32 showGuide = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->showguide(), output);
  }

  // optional string advUrl = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->advurl().data(), this->advurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.CanalInfo.advUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->advurl(), output);
  }

  // optional string serviceUrl = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceurl().data(), this->serviceurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.CanalInfo.serviceUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->serviceurl(), output);
  }

  // optional string iosUrl = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iosurl().data(), this->iosurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.CanalInfo.iosUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->iosurl(), output);
  }

  // optional int32 showWeb = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->showweb(), output);
  }

  // optional string webUrl = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weburl().data(), this->weburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.CanalInfo.webUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->weburl(), output);
  }

  // optional int32 allowGuestLogin = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->allowguestlogin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tnode.CanalInfo)
}

::google::protobuf::uint8* CanalInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tnode.CanalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 platformId = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->platformid(), target);
  }

  // optional int32 canalId = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->canalid(), target);
  }

  // optional string canalName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->canalname().data(), this->canalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.CanalInfo.canalName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->canalname(), target);
  }

  // optional int32 isAppStore = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isappstore(), target);
  }

  // optional int32 allowWeiXinLogin = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->allowweixinlogin(), target);
  }

  // optional int32 showGuide = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->showguide(), target);
  }

  // optional string advUrl = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->advurl().data(), this->advurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.CanalInfo.advUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->advurl(), target);
  }

  // optional string serviceUrl = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceurl().data(), this->serviceurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.CanalInfo.serviceUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->serviceurl(), target);
  }

  // optional string iosUrl = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iosurl().data(), this->iosurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.CanalInfo.iosUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->iosurl(), target);
  }

  // optional int32 showWeb = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->showweb(), target);
  }

  // optional string webUrl = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weburl().data(), this->weburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.CanalInfo.webUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->weburl(), target);
  }

  // optional int32 allowGuestLogin = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->allowguestlogin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tnode.CanalInfo)
  return target;
}

size_t CanalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tnode.CanalInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string canalName = 3;
    if (has_canalname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->canalname());
    }

    // optional string advUrl = 7;
    if (has_advurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->advurl());
    }

    // optional string serviceUrl = 8;
    if (has_serviceurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serviceurl());
    }

    // optional string iosUrl = 9;
    if (has_iosurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iosurl());
    }

    // optional string webUrl = 11;
    if (has_weburl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weburl());
    }

    // optional int32 platformId = 1;
    if (has_platformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platformid());
    }

    // optional int32 canalId = 2;
    if (has_canalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canalid());
    }

    // optional int32 isAppStore = 4;
    if (has_isappstore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isappstore());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int32 allowWeiXinLogin = 5;
    if (has_allowweixinlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allowweixinlogin());
    }

    // optional int32 showGuide = 6;
    if (has_showguide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showguide());
    }

    // optional int32 showWeb = 10;
    if (has_showweb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showweb());
    }

    // optional int32 allowGuestLogin = 12;
    if (has_allowguestlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allowguestlogin());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanalInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tnode.CanalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CanalInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CanalInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tnode.CanalInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tnode.CanalInfo)
    MergeFrom(*source);
  }
}

void CanalInfo::MergeFrom(const CanalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tnode.CanalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_canalname();
      canalname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canalname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_advurl();
      advurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.advurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_serviceurl();
      serviceurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serviceurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_iosurl();
      iosurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iosurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_weburl();
      weburl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weburl_);
    }
    if (cached_has_bits & 0x00000020u) {
      platformid_ = from.platformid_;
    }
    if (cached_has_bits & 0x00000040u) {
      canalid_ = from.canalid_;
    }
    if (cached_has_bits & 0x00000080u) {
      isappstore_ = from.isappstore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      allowweixinlogin_ = from.allowweixinlogin_;
    }
    if (cached_has_bits & 0x00000200u) {
      showguide_ = from.showguide_;
    }
    if (cached_has_bits & 0x00000400u) {
      showweb_ = from.showweb_;
    }
    if (cached_has_bits & 0x00000800u) {
      allowguestlogin_ = from.allowguestlogin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CanalInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tnode.CanalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanalInfo::CopyFrom(const CanalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tnode.CanalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanalInfo::IsInitialized() const {
  return true;
}

void CanalInfo::Swap(CanalInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CanalInfo::InternalSwap(CanalInfo* other) {
  canalname_.Swap(&other->canalname_);
  advurl_.Swap(&other->advurl_);
  serviceurl_.Swap(&other->serviceurl_);
  iosurl_.Swap(&other->iosurl_);
  weburl_.Swap(&other->weburl_);
  std::swap(platformid_, other->platformid_);
  std::swap(canalid_, other->canalid_);
  std::swap(isappstore_, other->isappstore_);
  std::swap(allowweixinlogin_, other->allowweixinlogin_);
  std::swap(showguide_, other->showguide_);
  std::swap(showweb_, other->showweb_);
  std::swap(allowguestlogin_, other->allowguestlogin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CanalInfo::GetMetadata() const {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CanalInfo

// optional int32 platformId = 1;
bool CanalInfo::has_platformid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CanalInfo::set_has_platformid() {
  _has_bits_[0] |= 0x00000020u;
}
void CanalInfo::clear_has_platformid() {
  _has_bits_[0] &= ~0x00000020u;
}
void CanalInfo::clear_platformid() {
  platformid_ = 0;
  clear_has_platformid();
}
::google::protobuf::int32 CanalInfo::platformid() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.platformId)
  return platformid_;
}
void CanalInfo::set_platformid(::google::protobuf::int32 value) {
  set_has_platformid();
  platformid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.platformId)
}

// optional int32 canalId = 2;
bool CanalInfo::has_canalid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CanalInfo::set_has_canalid() {
  _has_bits_[0] |= 0x00000040u;
}
void CanalInfo::clear_has_canalid() {
  _has_bits_[0] &= ~0x00000040u;
}
void CanalInfo::clear_canalid() {
  canalid_ = 0;
  clear_has_canalid();
}
::google::protobuf::int32 CanalInfo::canalid() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.canalId)
  return canalid_;
}
void CanalInfo::set_canalid(::google::protobuf::int32 value) {
  set_has_canalid();
  canalid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.canalId)
}

// optional string canalName = 3;
bool CanalInfo::has_canalname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CanalInfo::set_has_canalname() {
  _has_bits_[0] |= 0x00000001u;
}
void CanalInfo::clear_has_canalname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CanalInfo::clear_canalname() {
  canalname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canalname();
}
const ::std::string& CanalInfo::canalname() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.canalName)
  return canalname_.GetNoArena();
}
void CanalInfo::set_canalname(const ::std::string& value) {
  set_has_canalname();
  canalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.canalName)
}
#if LANG_CXX11
void CanalInfo::set_canalname(::std::string&& value) {
  set_has_canalname();
  canalname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.CanalInfo.canalName)
}
#endif
void CanalInfo::set_canalname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_canalname();
  canalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.CanalInfo.canalName)
}
void CanalInfo::set_canalname(const char* value, size_t size) {
  set_has_canalname();
  canalname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.CanalInfo.canalName)
}
::std::string* CanalInfo::mutable_canalname() {
  set_has_canalname();
  // @@protoc_insertion_point(field_mutable:Tnode.CanalInfo.canalName)
  return canalname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CanalInfo::release_canalname() {
  // @@protoc_insertion_point(field_release:Tnode.CanalInfo.canalName)
  clear_has_canalname();
  return canalname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CanalInfo::set_allocated_canalname(::std::string* canalname) {
  if (canalname != NULL) {
    set_has_canalname();
  } else {
    clear_has_canalname();
  }
  canalname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canalname);
  // @@protoc_insertion_point(field_set_allocated:Tnode.CanalInfo.canalName)
}

// optional int32 isAppStore = 4;
bool CanalInfo::has_isappstore() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CanalInfo::set_has_isappstore() {
  _has_bits_[0] |= 0x00000080u;
}
void CanalInfo::clear_has_isappstore() {
  _has_bits_[0] &= ~0x00000080u;
}
void CanalInfo::clear_isappstore() {
  isappstore_ = 0;
  clear_has_isappstore();
}
::google::protobuf::int32 CanalInfo::isappstore() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.isAppStore)
  return isappstore_;
}
void CanalInfo::set_isappstore(::google::protobuf::int32 value) {
  set_has_isappstore();
  isappstore_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.isAppStore)
}

// optional int32 allowWeiXinLogin = 5;
bool CanalInfo::has_allowweixinlogin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CanalInfo::set_has_allowweixinlogin() {
  _has_bits_[0] |= 0x00000100u;
}
void CanalInfo::clear_has_allowweixinlogin() {
  _has_bits_[0] &= ~0x00000100u;
}
void CanalInfo::clear_allowweixinlogin() {
  allowweixinlogin_ = 0;
  clear_has_allowweixinlogin();
}
::google::protobuf::int32 CanalInfo::allowweixinlogin() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.allowWeiXinLogin)
  return allowweixinlogin_;
}
void CanalInfo::set_allowweixinlogin(::google::protobuf::int32 value) {
  set_has_allowweixinlogin();
  allowweixinlogin_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.allowWeiXinLogin)
}

// optional int32 showGuide = 6;
bool CanalInfo::has_showguide() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CanalInfo::set_has_showguide() {
  _has_bits_[0] |= 0x00000200u;
}
void CanalInfo::clear_has_showguide() {
  _has_bits_[0] &= ~0x00000200u;
}
void CanalInfo::clear_showguide() {
  showguide_ = 0;
  clear_has_showguide();
}
::google::protobuf::int32 CanalInfo::showguide() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.showGuide)
  return showguide_;
}
void CanalInfo::set_showguide(::google::protobuf::int32 value) {
  set_has_showguide();
  showguide_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.showGuide)
}

// optional string advUrl = 7;
bool CanalInfo::has_advurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CanalInfo::set_has_advurl() {
  _has_bits_[0] |= 0x00000002u;
}
void CanalInfo::clear_has_advurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void CanalInfo::clear_advurl() {
  advurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_advurl();
}
const ::std::string& CanalInfo::advurl() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.advUrl)
  return advurl_.GetNoArena();
}
void CanalInfo::set_advurl(const ::std::string& value) {
  set_has_advurl();
  advurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.advUrl)
}
#if LANG_CXX11
void CanalInfo::set_advurl(::std::string&& value) {
  set_has_advurl();
  advurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.CanalInfo.advUrl)
}
#endif
void CanalInfo::set_advurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_advurl();
  advurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.CanalInfo.advUrl)
}
void CanalInfo::set_advurl(const char* value, size_t size) {
  set_has_advurl();
  advurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.CanalInfo.advUrl)
}
::std::string* CanalInfo::mutable_advurl() {
  set_has_advurl();
  // @@protoc_insertion_point(field_mutable:Tnode.CanalInfo.advUrl)
  return advurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CanalInfo::release_advurl() {
  // @@protoc_insertion_point(field_release:Tnode.CanalInfo.advUrl)
  clear_has_advurl();
  return advurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CanalInfo::set_allocated_advurl(::std::string* advurl) {
  if (advurl != NULL) {
    set_has_advurl();
  } else {
    clear_has_advurl();
  }
  advurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), advurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.CanalInfo.advUrl)
}

// optional string serviceUrl = 8;
bool CanalInfo::has_serviceurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CanalInfo::set_has_serviceurl() {
  _has_bits_[0] |= 0x00000004u;
}
void CanalInfo::clear_has_serviceurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void CanalInfo::clear_serviceurl() {
  serviceurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serviceurl();
}
const ::std::string& CanalInfo::serviceurl() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.serviceUrl)
  return serviceurl_.GetNoArena();
}
void CanalInfo::set_serviceurl(const ::std::string& value) {
  set_has_serviceurl();
  serviceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.serviceUrl)
}
#if LANG_CXX11
void CanalInfo::set_serviceurl(::std::string&& value) {
  set_has_serviceurl();
  serviceurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.CanalInfo.serviceUrl)
}
#endif
void CanalInfo::set_serviceurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serviceurl();
  serviceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.CanalInfo.serviceUrl)
}
void CanalInfo::set_serviceurl(const char* value, size_t size) {
  set_has_serviceurl();
  serviceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.CanalInfo.serviceUrl)
}
::std::string* CanalInfo::mutable_serviceurl() {
  set_has_serviceurl();
  // @@protoc_insertion_point(field_mutable:Tnode.CanalInfo.serviceUrl)
  return serviceurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CanalInfo::release_serviceurl() {
  // @@protoc_insertion_point(field_release:Tnode.CanalInfo.serviceUrl)
  clear_has_serviceurl();
  return serviceurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CanalInfo::set_allocated_serviceurl(::std::string* serviceurl) {
  if (serviceurl != NULL) {
    set_has_serviceurl();
  } else {
    clear_has_serviceurl();
  }
  serviceurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serviceurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.CanalInfo.serviceUrl)
}

// optional string iosUrl = 9;
bool CanalInfo::has_iosurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CanalInfo::set_has_iosurl() {
  _has_bits_[0] |= 0x00000008u;
}
void CanalInfo::clear_has_iosurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void CanalInfo::clear_iosurl() {
  iosurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iosurl();
}
const ::std::string& CanalInfo::iosurl() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.iosUrl)
  return iosurl_.GetNoArena();
}
void CanalInfo::set_iosurl(const ::std::string& value) {
  set_has_iosurl();
  iosurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.iosUrl)
}
#if LANG_CXX11
void CanalInfo::set_iosurl(::std::string&& value) {
  set_has_iosurl();
  iosurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.CanalInfo.iosUrl)
}
#endif
void CanalInfo::set_iosurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_iosurl();
  iosurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.CanalInfo.iosUrl)
}
void CanalInfo::set_iosurl(const char* value, size_t size) {
  set_has_iosurl();
  iosurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.CanalInfo.iosUrl)
}
::std::string* CanalInfo::mutable_iosurl() {
  set_has_iosurl();
  // @@protoc_insertion_point(field_mutable:Tnode.CanalInfo.iosUrl)
  return iosurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CanalInfo::release_iosurl() {
  // @@protoc_insertion_point(field_release:Tnode.CanalInfo.iosUrl)
  clear_has_iosurl();
  return iosurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CanalInfo::set_allocated_iosurl(::std::string* iosurl) {
  if (iosurl != NULL) {
    set_has_iosurl();
  } else {
    clear_has_iosurl();
  }
  iosurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iosurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.CanalInfo.iosUrl)
}

// optional int32 showWeb = 10;
bool CanalInfo::has_showweb() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CanalInfo::set_has_showweb() {
  _has_bits_[0] |= 0x00000400u;
}
void CanalInfo::clear_has_showweb() {
  _has_bits_[0] &= ~0x00000400u;
}
void CanalInfo::clear_showweb() {
  showweb_ = 0;
  clear_has_showweb();
}
::google::protobuf::int32 CanalInfo::showweb() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.showWeb)
  return showweb_;
}
void CanalInfo::set_showweb(::google::protobuf::int32 value) {
  set_has_showweb();
  showweb_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.showWeb)
}

// optional string webUrl = 11;
bool CanalInfo::has_weburl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CanalInfo::set_has_weburl() {
  _has_bits_[0] |= 0x00000010u;
}
void CanalInfo::clear_has_weburl() {
  _has_bits_[0] &= ~0x00000010u;
}
void CanalInfo::clear_weburl() {
  weburl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weburl();
}
const ::std::string& CanalInfo::weburl() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.webUrl)
  return weburl_.GetNoArena();
}
void CanalInfo::set_weburl(const ::std::string& value) {
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.webUrl)
}
#if LANG_CXX11
void CanalInfo::set_weburl(::std::string&& value) {
  set_has_weburl();
  weburl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.CanalInfo.webUrl)
}
#endif
void CanalInfo::set_weburl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.CanalInfo.webUrl)
}
void CanalInfo::set_weburl(const char* value, size_t size) {
  set_has_weburl();
  weburl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.CanalInfo.webUrl)
}
::std::string* CanalInfo::mutable_weburl() {
  set_has_weburl();
  // @@protoc_insertion_point(field_mutable:Tnode.CanalInfo.webUrl)
  return weburl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CanalInfo::release_weburl() {
  // @@protoc_insertion_point(field_release:Tnode.CanalInfo.webUrl)
  clear_has_weburl();
  return weburl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CanalInfo::set_allocated_weburl(::std::string* weburl) {
  if (weburl != NULL) {
    set_has_weburl();
  } else {
    clear_has_weburl();
  }
  weburl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weburl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.CanalInfo.webUrl)
}

// optional int32 allowGuestLogin = 12;
bool CanalInfo::has_allowguestlogin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CanalInfo::set_has_allowguestlogin() {
  _has_bits_[0] |= 0x00000800u;
}
void CanalInfo::clear_has_allowguestlogin() {
  _has_bits_[0] &= ~0x00000800u;
}
void CanalInfo::clear_allowguestlogin() {
  allowguestlogin_ = 0;
  clear_has_allowguestlogin();
}
::google::protobuf::int32 CanalInfo::allowguestlogin() const {
  // @@protoc_insertion_point(field_get:Tnode.CanalInfo.allowGuestLogin)
  return allowguestlogin_;
}
void CanalInfo::set_allowguestlogin(::google::protobuf::int32 value) {
  set_has_allowguestlogin();
  allowguestlogin_ = value;
  // @@protoc_insertion_point(field_set:Tnode.CanalInfo.allowGuestLogin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LobbyInfo::kPlatformIdFieldNumber;
const int LobbyInfo::kGameIdFieldNumber;
const int LobbyInfo::kCanalIdFieldNumber;
const int LobbyInfo::kClientVerFieldNumber;
const int LobbyInfo::kResVerFieldNumber;
const int LobbyInfo::kDownloadUrlFieldNumber;
const int LobbyInfo::kDownGameUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LobbyInfo::LobbyInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2ftnode_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tnode.LobbyInfo)
}
LobbyInfo::LobbyInfo(const LobbyInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  downloadurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_downloadurl()) {
    downloadurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadurl_);
  }
  downgameurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_downgameurl()) {
    downgameurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downgameurl_);
  }
  ::memcpy(&platformid_, &from.platformid_,
    reinterpret_cast<char*>(&resver_) -
    reinterpret_cast<char*>(&platformid_) + sizeof(resver_));
  // @@protoc_insertion_point(copy_constructor:Tnode.LobbyInfo)
}

void LobbyInfo::SharedCtor() {
  _cached_size_ = 0;
  downloadurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downgameurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&platformid_, 0, reinterpret_cast<char*>(&resver_) -
    reinterpret_cast<char*>(&platformid_) + sizeof(resver_));
}

LobbyInfo::~LobbyInfo() {
  // @@protoc_insertion_point(destructor:Tnode.LobbyInfo)
  SharedDtor();
}

void LobbyInfo::SharedDtor() {
  downloadurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downgameurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LobbyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyInfo::descriptor() {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LobbyInfo& LobbyInfo::default_instance() {
  protobuf_proto_2ftnode_2eproto::InitDefaults();
  return *internal_default_instance();
}

LobbyInfo* LobbyInfo::New(::google::protobuf::Arena* arena) const {
  LobbyInfo* n = new LobbyInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LobbyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Tnode.LobbyInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_downloadurl()) {
      GOOGLE_DCHECK(!downloadurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*downloadurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_downgameurl()) {
      GOOGLE_DCHECK(!downgameurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*downgameurl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&platformid_, 0, reinterpret_cast<char*>(&resver_) -
      reinterpret_cast<char*>(&platformid_) + sizeof(resver_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LobbyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tnode.LobbyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 platformId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_platformid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platformid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gameId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 canalId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_canalid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 clientVer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_clientver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 resVer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_resver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string downloadUrl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->downloadurl().data(), this->downloadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.LobbyInfo.downloadUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string downGameUrl = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downgameurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->downgameurl().data(), this->downgameurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.LobbyInfo.downGameUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tnode.LobbyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tnode.LobbyInfo)
  return false;
#undef DO_
}

void LobbyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tnode.LobbyInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 platformId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->platformid(), output);
  }

  // optional int32 gameId = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // optional int32 canalId = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->canalid(), output);
  }

  // optional int32 clientVer = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->clientver(), output);
  }

  // optional int32 resVer = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->resver(), output);
  }

  // optional string downloadUrl = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.LobbyInfo.downloadUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->downloadurl(), output);
  }

  // optional string downGameUrl = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->downgameurl().data(), this->downgameurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.LobbyInfo.downGameUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->downgameurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tnode.LobbyInfo)
}

::google::protobuf::uint8* LobbyInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tnode.LobbyInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 platformId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->platformid(), target);
  }

  // optional int32 gameId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // optional int32 canalId = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->canalid(), target);
  }

  // optional int32 clientVer = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clientver(), target);
  }

  // optional int32 resVer = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->resver(), target);
  }

  // optional string downloadUrl = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.LobbyInfo.downloadUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->downloadurl(), target);
  }

  // optional string downGameUrl = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->downgameurl().data(), this->downgameurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.LobbyInfo.downGameUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->downgameurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tnode.LobbyInfo)
  return target;
}

size_t LobbyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tnode.LobbyInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string downloadUrl = 6;
    if (has_downloadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadurl());
    }

    // optional string downGameUrl = 7;
    if (has_downgameurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downgameurl());
    }

    // optional int32 platformId = 1;
    if (has_platformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platformid());
    }

    // optional int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 canalId = 3;
    if (has_canalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canalid());
    }

    // optional int32 clientVer = 4;
    if (has_clientver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientver());
    }

    // optional int32 resVer = 5;
    if (has_resver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resver());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tnode.LobbyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LobbyInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LobbyInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tnode.LobbyInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tnode.LobbyInfo)
    MergeFrom(*source);
  }
}

void LobbyInfo::MergeFrom(const LobbyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tnode.LobbyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_downloadurl();
      downloadurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_downgameurl();
      downgameurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downgameurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      platformid_ = from.platformid_;
    }
    if (cached_has_bits & 0x00000008u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000010u) {
      canalid_ = from.canalid_;
    }
    if (cached_has_bits & 0x00000020u) {
      clientver_ = from.clientver_;
    }
    if (cached_has_bits & 0x00000040u) {
      resver_ = from.resver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LobbyInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tnode.LobbyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyInfo::CopyFrom(const LobbyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tnode.LobbyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyInfo::IsInitialized() const {
  return true;
}

void LobbyInfo::Swap(LobbyInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LobbyInfo::InternalSwap(LobbyInfo* other) {
  downloadurl_.Swap(&other->downloadurl_);
  downgameurl_.Swap(&other->downgameurl_);
  std::swap(platformid_, other->platformid_);
  std::swap(gameid_, other->gameid_);
  std::swap(canalid_, other->canalid_);
  std::swap(clientver_, other->clientver_);
  std::swap(resver_, other->resver_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LobbyInfo::GetMetadata() const {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LobbyInfo

// optional int32 platformId = 1;
bool LobbyInfo::has_platformid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LobbyInfo::set_has_platformid() {
  _has_bits_[0] |= 0x00000004u;
}
void LobbyInfo::clear_has_platformid() {
  _has_bits_[0] &= ~0x00000004u;
}
void LobbyInfo::clear_platformid() {
  platformid_ = 0;
  clear_has_platformid();
}
::google::protobuf::int32 LobbyInfo::platformid() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.platformId)
  return platformid_;
}
void LobbyInfo::set_platformid(::google::protobuf::int32 value) {
  set_has_platformid();
  platformid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.platformId)
}

// optional int32 gameId = 2;
bool LobbyInfo::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LobbyInfo::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
void LobbyInfo::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
void LobbyInfo::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
::google::protobuf::int32 LobbyInfo::gameid() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.gameId)
  return gameid_;
}
void LobbyInfo::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.gameId)
}

// optional int32 canalId = 3;
bool LobbyInfo::has_canalid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LobbyInfo::set_has_canalid() {
  _has_bits_[0] |= 0x00000010u;
}
void LobbyInfo::clear_has_canalid() {
  _has_bits_[0] &= ~0x00000010u;
}
void LobbyInfo::clear_canalid() {
  canalid_ = 0;
  clear_has_canalid();
}
::google::protobuf::int32 LobbyInfo::canalid() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.canalId)
  return canalid_;
}
void LobbyInfo::set_canalid(::google::protobuf::int32 value) {
  set_has_canalid();
  canalid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.canalId)
}

// optional int32 clientVer = 4;
bool LobbyInfo::has_clientver() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LobbyInfo::set_has_clientver() {
  _has_bits_[0] |= 0x00000020u;
}
void LobbyInfo::clear_has_clientver() {
  _has_bits_[0] &= ~0x00000020u;
}
void LobbyInfo::clear_clientver() {
  clientver_ = 0;
  clear_has_clientver();
}
::google::protobuf::int32 LobbyInfo::clientver() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.clientVer)
  return clientver_;
}
void LobbyInfo::set_clientver(::google::protobuf::int32 value) {
  set_has_clientver();
  clientver_ = value;
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.clientVer)
}

// optional int32 resVer = 5;
bool LobbyInfo::has_resver() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LobbyInfo::set_has_resver() {
  _has_bits_[0] |= 0x00000040u;
}
void LobbyInfo::clear_has_resver() {
  _has_bits_[0] &= ~0x00000040u;
}
void LobbyInfo::clear_resver() {
  resver_ = 0;
  clear_has_resver();
}
::google::protobuf::int32 LobbyInfo::resver() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.resVer)
  return resver_;
}
void LobbyInfo::set_resver(::google::protobuf::int32 value) {
  set_has_resver();
  resver_ = value;
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.resVer)
}

// optional string downloadUrl = 6;
bool LobbyInfo::has_downloadurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LobbyInfo::set_has_downloadurl() {
  _has_bits_[0] |= 0x00000001u;
}
void LobbyInfo::clear_has_downloadurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void LobbyInfo::clear_downloadurl() {
  downloadurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_downloadurl();
}
const ::std::string& LobbyInfo::downloadurl() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.downloadUrl)
  return downloadurl_.GetNoArena();
}
void LobbyInfo::set_downloadurl(const ::std::string& value) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.downloadUrl)
}
#if LANG_CXX11
void LobbyInfo::set_downloadurl(::std::string&& value) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.LobbyInfo.downloadUrl)
}
#endif
void LobbyInfo::set_downloadurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.LobbyInfo.downloadUrl)
}
void LobbyInfo::set_downloadurl(const char* value, size_t size) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.LobbyInfo.downloadUrl)
}
::std::string* LobbyInfo::mutable_downloadurl() {
  set_has_downloadurl();
  // @@protoc_insertion_point(field_mutable:Tnode.LobbyInfo.downloadUrl)
  return downloadurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LobbyInfo::release_downloadurl() {
  // @@protoc_insertion_point(field_release:Tnode.LobbyInfo.downloadUrl)
  clear_has_downloadurl();
  return downloadurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LobbyInfo::set_allocated_downloadurl(::std::string* downloadurl) {
  if (downloadurl != NULL) {
    set_has_downloadurl();
  } else {
    clear_has_downloadurl();
  }
  downloadurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), downloadurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.LobbyInfo.downloadUrl)
}

// optional string downGameUrl = 7;
bool LobbyInfo::has_downgameurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LobbyInfo::set_has_downgameurl() {
  _has_bits_[0] |= 0x00000002u;
}
void LobbyInfo::clear_has_downgameurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void LobbyInfo::clear_downgameurl() {
  downgameurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_downgameurl();
}
const ::std::string& LobbyInfo::downgameurl() const {
  // @@protoc_insertion_point(field_get:Tnode.LobbyInfo.downGameUrl)
  return downgameurl_.GetNoArena();
}
void LobbyInfo::set_downgameurl(const ::std::string& value) {
  set_has_downgameurl();
  downgameurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.LobbyInfo.downGameUrl)
}
#if LANG_CXX11
void LobbyInfo::set_downgameurl(::std::string&& value) {
  set_has_downgameurl();
  downgameurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.LobbyInfo.downGameUrl)
}
#endif
void LobbyInfo::set_downgameurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_downgameurl();
  downgameurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.LobbyInfo.downGameUrl)
}
void LobbyInfo::set_downgameurl(const char* value, size_t size) {
  set_has_downgameurl();
  downgameurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.LobbyInfo.downGameUrl)
}
::std::string* LobbyInfo::mutable_downgameurl() {
  set_has_downgameurl();
  // @@protoc_insertion_point(field_mutable:Tnode.LobbyInfo.downGameUrl)
  return downgameurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LobbyInfo::release_downgameurl() {
  // @@protoc_insertion_point(field_release:Tnode.LobbyInfo.downGameUrl)
  clear_has_downgameurl();
  return downgameurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LobbyInfo::set_allocated_downgameurl(::std::string* downgameurl) {
  if (downgameurl != NULL) {
    set_has_downgameurl();
  } else {
    clear_has_downgameurl();
  }
  downgameurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), downgameurl);
  // @@protoc_insertion_point(field_set_allocated:Tnode.LobbyInfo.downGameUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInfo::kIpFieldNumber;
const int NodeInfo::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfo::NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2ftnode_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tnode.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:Tnode.NodeInfo)
}

void NodeInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:Tnode.NodeInfo)
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo::descriptor() {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeInfo& NodeInfo::default_instance() {
  protobuf_proto_2ftnode_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeInfo* NodeInfo::New(::google::protobuf::Arena* arena) const {
  NodeInfo* n = new NodeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Tnode.NodeInfo)
  if (has_ip()) {
    GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ip_.UnsafeRawStringPointer())->clear();
  }
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tnode.NodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.NodeInfo.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tnode.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tnode.NodeInfo)
  return false;
#undef DO_
}

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tnode.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.NodeInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tnode.NodeInfo)
}

::google::protobuf::uint8* NodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tnode.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.NodeInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tnode.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tnode.NodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tnode.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tnode.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tnode.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tnode.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tnode.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tnode.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfo::InternalSwap(NodeInfo* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeInfo

// optional string ip = 1;
bool NodeInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& NodeInfo::ip() const {
  // @@protoc_insertion_point(field_get:Tnode.NodeInfo.ip)
  return ip_.GetNoArena();
}
void NodeInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.NodeInfo.ip)
}
#if LANG_CXX11
void NodeInfo::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.NodeInfo.ip)
}
#endif
void NodeInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.NodeInfo.ip)
}
void NodeInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.NodeInfo.ip)
}
::std::string* NodeInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:Tnode.NodeInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeInfo::release_ip() {
  // @@protoc_insertion_point(field_release:Tnode.NodeInfo.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Tnode.NodeInfo.ip)
}

// optional int32 port = 2;
bool NodeInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NodeInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void NodeInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void NodeInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 NodeInfo::port() const {
  // @@protoc_insertion_point(field_get:Tnode.NodeInfo.port)
  return port_;
}
void NodeInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:Tnode.NodeInfo.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeGroup::kCanalIdFieldNumber;
const int NodeGroup::kVipLevelFieldNumber;
const int NodeGroup::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeGroup::NodeGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2ftnode_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tnode.NodeGroup)
}
NodeGroup::NodeGroup(const NodeGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&canalid_, &from.canalid_,
    reinterpret_cast<char*>(&viplevel_) -
    reinterpret_cast<char*>(&canalid_) + sizeof(viplevel_));
  // @@protoc_insertion_point(copy_constructor:Tnode.NodeGroup)
}

void NodeGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&canalid_, 0, reinterpret_cast<char*>(&viplevel_) -
    reinterpret_cast<char*>(&canalid_) + sizeof(viplevel_));
}

NodeGroup::~NodeGroup() {
  // @@protoc_insertion_point(destructor:Tnode.NodeGroup)
  SharedDtor();
}

void NodeGroup::SharedDtor() {
}

void NodeGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeGroup::descriptor() {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeGroup& NodeGroup::default_instance() {
  protobuf_proto_2ftnode_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeGroup* NodeGroup::New(::google::protobuf::Arena* arena) const {
  NodeGroup* n = new NodeGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:Tnode.NodeGroup)
  nodes_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&canalid_, 0, reinterpret_cast<char*>(&viplevel_) -
      reinterpret_cast<char*>(&canalid_) + sizeof(viplevel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tnode.NodeGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 canalId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_canalid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vipLevel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_viplevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Tnode.NodeInfo nodes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tnode.NodeGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tnode.NodeGroup)
  return false;
#undef DO_
}

void NodeGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tnode.NodeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 canalId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->canalid(), output);
  }

  // optional int32 vipLevel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->viplevel(), output);
  }

  // repeated .Tnode.NodeInfo nodes = 3;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tnode.NodeGroup)
}

::google::protobuf::uint8* NodeGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tnode.NodeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 canalId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->canalid(), target);
  }

  // optional int32 vipLevel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->viplevel(), target);
  }

  // repeated .Tnode.NodeInfo nodes = 3;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->nodes(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tnode.NodeGroup)
  return target;
}

size_t NodeGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tnode.NodeGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Tnode.NodeInfo nodes = 3;
  {
    unsigned int count = this->nodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 canalId = 1;
    if (has_canalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canalid());
    }

    // optional int32 vipLevel = 2;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tnode.NodeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tnode.NodeGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tnode.NodeGroup)
    MergeFrom(*source);
  }
}

void NodeGroup::MergeFrom(const NodeGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tnode.NodeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      canalid_ = from.canalid_;
    }
    if (cached_has_bits & 0x00000002u) {
      viplevel_ = from.viplevel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tnode.NodeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeGroup::CopyFrom(const NodeGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tnode.NodeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeGroup::IsInitialized() const {
  return true;
}

void NodeGroup::Swap(NodeGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeGroup::InternalSwap(NodeGroup* other) {
  nodes_.InternalSwap(&other->nodes_);
  std::swap(canalid_, other->canalid_);
  std::swap(viplevel_, other->viplevel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeGroup::GetMetadata() const {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeGroup

// optional int32 canalId = 1;
bool NodeGroup::has_canalid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeGroup::set_has_canalid() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeGroup::clear_has_canalid() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeGroup::clear_canalid() {
  canalid_ = 0;
  clear_has_canalid();
}
::google::protobuf::int32 NodeGroup::canalid() const {
  // @@protoc_insertion_point(field_get:Tnode.NodeGroup.canalId)
  return canalid_;
}
void NodeGroup::set_canalid(::google::protobuf::int32 value) {
  set_has_canalid();
  canalid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.NodeGroup.canalId)
}

// optional int32 vipLevel = 2;
bool NodeGroup::has_viplevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NodeGroup::set_has_viplevel() {
  _has_bits_[0] |= 0x00000002u;
}
void NodeGroup::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000002u;
}
void NodeGroup::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
::google::protobuf::int32 NodeGroup::viplevel() const {
  // @@protoc_insertion_point(field_get:Tnode.NodeGroup.vipLevel)
  return viplevel_;
}
void NodeGroup::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:Tnode.NodeGroup.vipLevel)
}

// repeated .Tnode.NodeInfo nodes = 3;
int NodeGroup::nodes_size() const {
  return nodes_.size();
}
void NodeGroup::clear_nodes() {
  nodes_.Clear();
}
const ::Tnode::NodeInfo& NodeGroup::nodes(int index) const {
  // @@protoc_insertion_point(field_get:Tnode.NodeGroup.nodes)
  return nodes_.Get(index);
}
::Tnode::NodeInfo* NodeGroup::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:Tnode.NodeGroup.nodes)
  return nodes_.Mutable(index);
}
::Tnode::NodeInfo* NodeGroup::add_nodes() {
  // @@protoc_insertion_point(field_add:Tnode.NodeGroup.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::Tnode::NodeInfo >*
NodeGroup::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:Tnode.NodeGroup.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::Tnode::NodeInfo >&
NodeGroup::nodes() const {
  // @@protoc_insertion_point(field_list:Tnode.NodeGroup.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckNodeInfo::kPlatformFieldNumber;
const int AckNodeInfo::kLobbysFieldNumber;
const int AckNodeInfo::kCanalsFieldNumber;
const int AckNodeInfo::kNodeGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckNodeInfo::AckNodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2ftnode_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tnode.AckNodeInfo)
}
AckNodeInfo::AckNodeInfo(const AckNodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lobbys_(from.lobbys_),
      canals_(from.canals_),
      nodegroups_(from.nodegroups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_platform()) {
    platform_ = new ::Tnode::PlatformInfo(*from.platform_);
  } else {
    platform_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Tnode.AckNodeInfo)
}

void AckNodeInfo::SharedCtor() {
  _cached_size_ = 0;
  platform_ = NULL;
}

AckNodeInfo::~AckNodeInfo() {
  // @@protoc_insertion_point(destructor:Tnode.AckNodeInfo)
  SharedDtor();
}

void AckNodeInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete platform_;
  }
}

void AckNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckNodeInfo::descriptor() {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckNodeInfo& AckNodeInfo::default_instance() {
  protobuf_proto_2ftnode_2eproto::InitDefaults();
  return *internal_default_instance();
}

AckNodeInfo* AckNodeInfo::New(::google::protobuf::Arena* arena) const {
  AckNodeInfo* n = new AckNodeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Tnode.AckNodeInfo)
  lobbys_.Clear();
  canals_.Clear();
  nodegroups_.Clear();
  if (has_platform()) {
    GOOGLE_DCHECK(platform_ != NULL);
    platform_->::Tnode::PlatformInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tnode.AckNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Tnode.PlatformInfo platform = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_platform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Tnode.LobbyInfo lobbys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Tnode.CanalInfo canals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_canals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Tnode.NodeGroup nodeGroups = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodegroups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tnode.AckNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tnode.AckNodeInfo)
  return false;
#undef DO_
}

void AckNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tnode.AckNodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Tnode.PlatformInfo platform = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->platform_, output);
  }

  // repeated .Tnode.LobbyInfo lobbys = 2;
  for (unsigned int i = 0, n = this->lobbys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lobbys(i), output);
  }

  // repeated .Tnode.CanalInfo canals = 3;
  for (unsigned int i = 0, n = this->canals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->canals(i), output);
  }

  // repeated .Tnode.NodeGroup nodeGroups = 4;
  for (unsigned int i = 0, n = this->nodegroups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nodegroups(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tnode.AckNodeInfo)
}

::google::protobuf::uint8* AckNodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tnode.AckNodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Tnode.PlatformInfo platform = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->platform_, deterministic, target);
  }

  // repeated .Tnode.LobbyInfo lobbys = 2;
  for (unsigned int i = 0, n = this->lobbys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lobbys(i), deterministic, target);
  }

  // repeated .Tnode.CanalInfo canals = 3;
  for (unsigned int i = 0, n = this->canals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->canals(i), deterministic, target);
  }

  // repeated .Tnode.NodeGroup nodeGroups = 4;
  for (unsigned int i = 0, n = this->nodegroups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->nodegroups(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tnode.AckNodeInfo)
  return target;
}

size_t AckNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tnode.AckNodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Tnode.LobbyInfo lobbys = 2;
  {
    unsigned int count = this->lobbys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lobbys(i));
    }
  }

  // repeated .Tnode.CanalInfo canals = 3;
  {
    unsigned int count = this->canals_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->canals(i));
    }
  }

  // repeated .Tnode.NodeGroup nodeGroups = 4;
  {
    unsigned int count = this->nodegroups_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodegroups(i));
    }
  }

  // optional .Tnode.PlatformInfo platform = 1;
  if (has_platform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->platform_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tnode.AckNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AckNodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckNodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tnode.AckNodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tnode.AckNodeInfo)
    MergeFrom(*source);
  }
}

void AckNodeInfo::MergeFrom(const AckNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tnode.AckNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbys_.MergeFrom(from.lobbys_);
  canals_.MergeFrom(from.canals_);
  nodegroups_.MergeFrom(from.nodegroups_);
  if (from.has_platform()) {
    mutable_platform()->::Tnode::PlatformInfo::MergeFrom(from.platform());
  }
}

void AckNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tnode.AckNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckNodeInfo::CopyFrom(const AckNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tnode.AckNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckNodeInfo::IsInitialized() const {
  return true;
}

void AckNodeInfo::Swap(AckNodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckNodeInfo::InternalSwap(AckNodeInfo* other) {
  lobbys_.InternalSwap(&other->lobbys_);
  canals_.InternalSwap(&other->canals_);
  nodegroups_.InternalSwap(&other->nodegroups_);
  std::swap(platform_, other->platform_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckNodeInfo::GetMetadata() const {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckNodeInfo

// optional .Tnode.PlatformInfo platform = 1;
bool AckNodeInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckNodeInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
void AckNodeInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckNodeInfo::clear_platform() {
  if (platform_ != NULL) platform_->::Tnode::PlatformInfo::Clear();
  clear_has_platform();
}
const ::Tnode::PlatformInfo& AckNodeInfo::platform() const {
  // @@protoc_insertion_point(field_get:Tnode.AckNodeInfo.platform)
  return platform_ != NULL ? *platform_
                         : *::Tnode::PlatformInfo::internal_default_instance();
}
::Tnode::PlatformInfo* AckNodeInfo::mutable_platform() {
  set_has_platform();
  if (platform_ == NULL) {
    platform_ = new ::Tnode::PlatformInfo;
  }
  // @@protoc_insertion_point(field_mutable:Tnode.AckNodeInfo.platform)
  return platform_;
}
::Tnode::PlatformInfo* AckNodeInfo::release_platform() {
  // @@protoc_insertion_point(field_release:Tnode.AckNodeInfo.platform)
  clear_has_platform();
  ::Tnode::PlatformInfo* temp = platform_;
  platform_ = NULL;
  return temp;
}
void AckNodeInfo::set_allocated_platform(::Tnode::PlatformInfo* platform) {
  delete platform_;
  platform_ = platform;
  if (platform) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  // @@protoc_insertion_point(field_set_allocated:Tnode.AckNodeInfo.platform)
}

// repeated .Tnode.LobbyInfo lobbys = 2;
int AckNodeInfo::lobbys_size() const {
  return lobbys_.size();
}
void AckNodeInfo::clear_lobbys() {
  lobbys_.Clear();
}
const ::Tnode::LobbyInfo& AckNodeInfo::lobbys(int index) const {
  // @@protoc_insertion_point(field_get:Tnode.AckNodeInfo.lobbys)
  return lobbys_.Get(index);
}
::Tnode::LobbyInfo* AckNodeInfo::mutable_lobbys(int index) {
  // @@protoc_insertion_point(field_mutable:Tnode.AckNodeInfo.lobbys)
  return lobbys_.Mutable(index);
}
::Tnode::LobbyInfo* AckNodeInfo::add_lobbys() {
  // @@protoc_insertion_point(field_add:Tnode.AckNodeInfo.lobbys)
  return lobbys_.Add();
}
::google::protobuf::RepeatedPtrField< ::Tnode::LobbyInfo >*
AckNodeInfo::mutable_lobbys() {
  // @@protoc_insertion_point(field_mutable_list:Tnode.AckNodeInfo.lobbys)
  return &lobbys_;
}
const ::google::protobuf::RepeatedPtrField< ::Tnode::LobbyInfo >&
AckNodeInfo::lobbys() const {
  // @@protoc_insertion_point(field_list:Tnode.AckNodeInfo.lobbys)
  return lobbys_;
}

// repeated .Tnode.CanalInfo canals = 3;
int AckNodeInfo::canals_size() const {
  return canals_.size();
}
void AckNodeInfo::clear_canals() {
  canals_.Clear();
}
const ::Tnode::CanalInfo& AckNodeInfo::canals(int index) const {
  // @@protoc_insertion_point(field_get:Tnode.AckNodeInfo.canals)
  return canals_.Get(index);
}
::Tnode::CanalInfo* AckNodeInfo::mutable_canals(int index) {
  // @@protoc_insertion_point(field_mutable:Tnode.AckNodeInfo.canals)
  return canals_.Mutable(index);
}
::Tnode::CanalInfo* AckNodeInfo::add_canals() {
  // @@protoc_insertion_point(field_add:Tnode.AckNodeInfo.canals)
  return canals_.Add();
}
::google::protobuf::RepeatedPtrField< ::Tnode::CanalInfo >*
AckNodeInfo::mutable_canals() {
  // @@protoc_insertion_point(field_mutable_list:Tnode.AckNodeInfo.canals)
  return &canals_;
}
const ::google::protobuf::RepeatedPtrField< ::Tnode::CanalInfo >&
AckNodeInfo::canals() const {
  // @@protoc_insertion_point(field_list:Tnode.AckNodeInfo.canals)
  return canals_;
}

// repeated .Tnode.NodeGroup nodeGroups = 4;
int AckNodeInfo::nodegroups_size() const {
  return nodegroups_.size();
}
void AckNodeInfo::clear_nodegroups() {
  nodegroups_.Clear();
}
const ::Tnode::NodeGroup& AckNodeInfo::nodegroups(int index) const {
  // @@protoc_insertion_point(field_get:Tnode.AckNodeInfo.nodeGroups)
  return nodegroups_.Get(index);
}
::Tnode::NodeGroup* AckNodeInfo::mutable_nodegroups(int index) {
  // @@protoc_insertion_point(field_mutable:Tnode.AckNodeInfo.nodeGroups)
  return nodegroups_.Mutable(index);
}
::Tnode::NodeGroup* AckNodeInfo::add_nodegroups() {
  // @@protoc_insertion_point(field_add:Tnode.AckNodeInfo.nodeGroups)
  return nodegroups_.Add();
}
::google::protobuf::RepeatedPtrField< ::Tnode::NodeGroup >*
AckNodeInfo::mutable_nodegroups() {
  // @@protoc_insertion_point(field_mutable_list:Tnode.AckNodeInfo.nodeGroups)
  return &nodegroups_;
}
const ::google::protobuf::RepeatedPtrField< ::Tnode::NodeGroup >&
AckNodeInfo::nodegroups() const {
  // @@protoc_insertion_point(field_list:Tnode.AckNodeInfo.nodeGroups)
  return nodegroups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqQueryUser::kLoginAccFieldNumber;
const int ReqQueryUser::kCanalIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqQueryUser::ReqQueryUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2ftnode_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tnode.ReqQueryUser)
}
ReqQueryUser::ReqQueryUser(const ReqQueryUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loginacc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_loginacc()) {
    loginacc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loginacc_);
  }
  canalid_ = from.canalid_;
  // @@protoc_insertion_point(copy_constructor:Tnode.ReqQueryUser)
}

void ReqQueryUser::SharedCtor() {
  _cached_size_ = 0;
  loginacc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canalid_ = 0;
}

ReqQueryUser::~ReqQueryUser() {
  // @@protoc_insertion_point(destructor:Tnode.ReqQueryUser)
  SharedDtor();
}

void ReqQueryUser::SharedDtor() {
  loginacc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqQueryUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqQueryUser::descriptor() {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqQueryUser& ReqQueryUser::default_instance() {
  protobuf_proto_2ftnode_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqQueryUser* ReqQueryUser::New(::google::protobuf::Arena* arena) const {
  ReqQueryUser* n = new ReqQueryUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqQueryUser::Clear() {
// @@protoc_insertion_point(message_clear_start:Tnode.ReqQueryUser)
  if (has_loginacc()) {
    GOOGLE_DCHECK(!loginacc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*loginacc_.UnsafeRawStringPointer())->clear();
  }
  canalid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqQueryUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tnode.ReqQueryUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string loginAcc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginacc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loginacc().data(), this->loginacc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.ReqQueryUser.loginAcc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 canalId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_canalid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tnode.ReqQueryUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tnode.ReqQueryUser)
  return false;
#undef DO_
}

void ReqQueryUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tnode.ReqQueryUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string loginAcc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginacc().data(), this->loginacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.ReqQueryUser.loginAcc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->loginacc(), output);
  }

  // optional int32 canalId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->canalid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tnode.ReqQueryUser)
}

::google::protobuf::uint8* ReqQueryUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tnode.ReqQueryUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string loginAcc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginacc().data(), this->loginacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.ReqQueryUser.loginAcc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->loginacc(), target);
  }

  // optional int32 canalId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->canalid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tnode.ReqQueryUser)
  return target;
}

size_t ReqQueryUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tnode.ReqQueryUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string loginAcc = 1;
    if (has_loginacc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginacc());
    }

    // optional int32 canalId = 2;
    if (has_canalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canalid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqQueryUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tnode.ReqQueryUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqQueryUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqQueryUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tnode.ReqQueryUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tnode.ReqQueryUser)
    MergeFrom(*source);
  }
}

void ReqQueryUser::MergeFrom(const ReqQueryUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tnode.ReqQueryUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_loginacc();
      loginacc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loginacc_);
    }
    if (cached_has_bits & 0x00000002u) {
      canalid_ = from.canalid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqQueryUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tnode.ReqQueryUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQueryUser::CopyFrom(const ReqQueryUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tnode.ReqQueryUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQueryUser::IsInitialized() const {
  return true;
}

void ReqQueryUser::Swap(ReqQueryUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqQueryUser::InternalSwap(ReqQueryUser* other) {
  loginacc_.Swap(&other->loginacc_);
  std::swap(canalid_, other->canalid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqQueryUser::GetMetadata() const {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqQueryUser

// optional string loginAcc = 1;
bool ReqQueryUser::has_loginacc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqQueryUser::set_has_loginacc() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqQueryUser::clear_has_loginacc() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqQueryUser::clear_loginacc() {
  loginacc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_loginacc();
}
const ::std::string& ReqQueryUser::loginacc() const {
  // @@protoc_insertion_point(field_get:Tnode.ReqQueryUser.loginAcc)
  return loginacc_.GetNoArena();
}
void ReqQueryUser::set_loginacc(const ::std::string& value) {
  set_has_loginacc();
  loginacc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.ReqQueryUser.loginAcc)
}
#if LANG_CXX11
void ReqQueryUser::set_loginacc(::std::string&& value) {
  set_has_loginacc();
  loginacc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.ReqQueryUser.loginAcc)
}
#endif
void ReqQueryUser::set_loginacc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_loginacc();
  loginacc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.ReqQueryUser.loginAcc)
}
void ReqQueryUser::set_loginacc(const char* value, size_t size) {
  set_has_loginacc();
  loginacc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.ReqQueryUser.loginAcc)
}
::std::string* ReqQueryUser::mutable_loginacc() {
  set_has_loginacc();
  // @@protoc_insertion_point(field_mutable:Tnode.ReqQueryUser.loginAcc)
  return loginacc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqQueryUser::release_loginacc() {
  // @@protoc_insertion_point(field_release:Tnode.ReqQueryUser.loginAcc)
  clear_has_loginacc();
  return loginacc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqQueryUser::set_allocated_loginacc(::std::string* loginacc) {
  if (loginacc != NULL) {
    set_has_loginacc();
  } else {
    clear_has_loginacc();
  }
  loginacc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginacc);
  // @@protoc_insertion_point(field_set_allocated:Tnode.ReqQueryUser.loginAcc)
}

// optional int32 canalId = 2;
bool ReqQueryUser::has_canalid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqQueryUser::set_has_canalid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqQueryUser::clear_has_canalid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqQueryUser::clear_canalid() {
  canalid_ = 0;
  clear_has_canalid();
}
::google::protobuf::int32 ReqQueryUser::canalid() const {
  // @@protoc_insertion_point(field_get:Tnode.ReqQueryUser.canalId)
  return canalid_;
}
void ReqQueryUser::set_canalid(::google::protobuf::int32 value) {
  set_has_canalid();
  canalid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.ReqQueryUser.canalId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckQueryUser::kCanalIdFieldNumber;
const int AckQueryUser::kPlatformIdFieldNumber;
const int AckQueryUser::kLoginAccFieldNumber;
const int AckQueryUser::kUserIdFieldNumber;
const int AckQueryUser::kNickNameFieldNumber;
const int AckQueryUser::kVipLevelFieldNumber;
const int AckQueryUser::kRegTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckQueryUser::AckQueryUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2ftnode_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tnode.AckQueryUser)
}
AckQueryUser::AckQueryUser(const AckQueryUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loginacc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_loginacc()) {
    loginacc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loginacc_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&canalid_, &from.canalid_,
    reinterpret_cast<char*>(&regtime_) -
    reinterpret_cast<char*>(&canalid_) + sizeof(regtime_));
  // @@protoc_insertion_point(copy_constructor:Tnode.AckQueryUser)
}

void AckQueryUser::SharedCtor() {
  _cached_size_ = 0;
  loginacc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&canalid_, 0, reinterpret_cast<char*>(&regtime_) -
    reinterpret_cast<char*>(&canalid_) + sizeof(regtime_));
}

AckQueryUser::~AckQueryUser() {
  // @@protoc_insertion_point(destructor:Tnode.AckQueryUser)
  SharedDtor();
}

void AckQueryUser::SharedDtor() {
  loginacc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AckQueryUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckQueryUser::descriptor() {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckQueryUser& AckQueryUser::default_instance() {
  protobuf_proto_2ftnode_2eproto::InitDefaults();
  return *internal_default_instance();
}

AckQueryUser* AckQueryUser::New(::google::protobuf::Arena* arena) const {
  AckQueryUser* n = new AckQueryUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckQueryUser::Clear() {
// @@protoc_insertion_point(message_clear_start:Tnode.AckQueryUser)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_loginacc()) {
      GOOGLE_DCHECK(!loginacc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*loginacc_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&canalid_, 0, reinterpret_cast<char*>(&regtime_) -
      reinterpret_cast<char*>(&canalid_) + sizeof(regtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckQueryUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tnode.AckQueryUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 canalId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_canalid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 platformId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_platformid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platformid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string loginAcc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginacc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loginacc().data(), this->loginacc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.AckQueryUser.loginAcc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 userId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tnode.AckQueryUser.nickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vipLevel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_viplevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 regTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_regtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &regtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tnode.AckQueryUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tnode.AckQueryUser)
  return false;
#undef DO_
}

void AckQueryUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tnode.AckQueryUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 canalId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->canalid(), output);
  }

  // optional int32 platformId = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->platformid(), output);
  }

  // optional string loginAcc = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginacc().data(), this->loginacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.AckQueryUser.loginAcc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->loginacc(), output);
  }

  // optional uint32 userId = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->userid(), output);
  }

  // optional string nickName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.AckQueryUser.nickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nickname(), output);
  }

  // optional int32 vipLevel = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->viplevel(), output);
  }

  // optional int32 regTime = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->regtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tnode.AckQueryUser)
}

::google::protobuf::uint8* AckQueryUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tnode.AckQueryUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 canalId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->canalid(), target);
  }

  // optional int32 platformId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->platformid(), target);
  }

  // optional string loginAcc = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginacc().data(), this->loginacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.AckQueryUser.loginAcc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->loginacc(), target);
  }

  // optional uint32 userId = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->userid(), target);
  }

  // optional string nickName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tnode.AckQueryUser.nickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional int32 vipLevel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->viplevel(), target);
  }

  // optional int32 regTime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->regtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tnode.AckQueryUser)
  return target;
}

size_t AckQueryUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tnode.AckQueryUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string loginAcc = 3;
    if (has_loginacc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginacc());
    }

    // optional string nickName = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 canalId = 1;
    if (has_canalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canalid());
    }

    // optional int32 platformId = 2;
    if (has_platformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platformid());
    }

    // optional uint32 userId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // optional int32 vipLevel = 6;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 regTime = 7;
    if (has_regtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regtime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckQueryUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tnode.AckQueryUser)
  GOOGLE_DCHECK_NE(&from, this);
  const AckQueryUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckQueryUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tnode.AckQueryUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tnode.AckQueryUser)
    MergeFrom(*source);
  }
}

void AckQueryUser::MergeFrom(const AckQueryUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tnode.AckQueryUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_loginacc();
      loginacc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loginacc_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      canalid_ = from.canalid_;
    }
    if (cached_has_bits & 0x00000008u) {
      platformid_ = from.platformid_;
    }
    if (cached_has_bits & 0x00000010u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000020u) {
      viplevel_ = from.viplevel_;
    }
    if (cached_has_bits & 0x00000040u) {
      regtime_ = from.regtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckQueryUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tnode.AckQueryUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckQueryUser::CopyFrom(const AckQueryUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tnode.AckQueryUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckQueryUser::IsInitialized() const {
  return true;
}

void AckQueryUser::Swap(AckQueryUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckQueryUser::InternalSwap(AckQueryUser* other) {
  loginacc_.Swap(&other->loginacc_);
  nickname_.Swap(&other->nickname_);
  std::swap(canalid_, other->canalid_);
  std::swap(platformid_, other->platformid_);
  std::swap(userid_, other->userid_);
  std::swap(viplevel_, other->viplevel_);
  std::swap(regtime_, other->regtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckQueryUser::GetMetadata() const {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckQueryUser

// optional int32 canalId = 1;
bool AckQueryUser::has_canalid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AckQueryUser::set_has_canalid() {
  _has_bits_[0] |= 0x00000004u;
}
void AckQueryUser::clear_has_canalid() {
  _has_bits_[0] &= ~0x00000004u;
}
void AckQueryUser::clear_canalid() {
  canalid_ = 0;
  clear_has_canalid();
}
::google::protobuf::int32 AckQueryUser::canalid() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.canalId)
  return canalid_;
}
void AckQueryUser::set_canalid(::google::protobuf::int32 value) {
  set_has_canalid();
  canalid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.canalId)
}

// optional int32 platformId = 2;
bool AckQueryUser::has_platformid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AckQueryUser::set_has_platformid() {
  _has_bits_[0] |= 0x00000008u;
}
void AckQueryUser::clear_has_platformid() {
  _has_bits_[0] &= ~0x00000008u;
}
void AckQueryUser::clear_platformid() {
  platformid_ = 0;
  clear_has_platformid();
}
::google::protobuf::int32 AckQueryUser::platformid() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.platformId)
  return platformid_;
}
void AckQueryUser::set_platformid(::google::protobuf::int32 value) {
  set_has_platformid();
  platformid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.platformId)
}

// optional string loginAcc = 3;
bool AckQueryUser::has_loginacc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckQueryUser::set_has_loginacc() {
  _has_bits_[0] |= 0x00000001u;
}
void AckQueryUser::clear_has_loginacc() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckQueryUser::clear_loginacc() {
  loginacc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_loginacc();
}
const ::std::string& AckQueryUser::loginacc() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.loginAcc)
  return loginacc_.GetNoArena();
}
void AckQueryUser::set_loginacc(const ::std::string& value) {
  set_has_loginacc();
  loginacc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.loginAcc)
}
#if LANG_CXX11
void AckQueryUser::set_loginacc(::std::string&& value) {
  set_has_loginacc();
  loginacc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.AckQueryUser.loginAcc)
}
#endif
void AckQueryUser::set_loginacc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_loginacc();
  loginacc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.AckQueryUser.loginAcc)
}
void AckQueryUser::set_loginacc(const char* value, size_t size) {
  set_has_loginacc();
  loginacc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.AckQueryUser.loginAcc)
}
::std::string* AckQueryUser::mutable_loginacc() {
  set_has_loginacc();
  // @@protoc_insertion_point(field_mutable:Tnode.AckQueryUser.loginAcc)
  return loginacc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AckQueryUser::release_loginacc() {
  // @@protoc_insertion_point(field_release:Tnode.AckQueryUser.loginAcc)
  clear_has_loginacc();
  return loginacc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AckQueryUser::set_allocated_loginacc(::std::string* loginacc) {
  if (loginacc != NULL) {
    set_has_loginacc();
  } else {
    clear_has_loginacc();
  }
  loginacc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginacc);
  // @@protoc_insertion_point(field_set_allocated:Tnode.AckQueryUser.loginAcc)
}

// optional uint32 userId = 4;
bool AckQueryUser::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AckQueryUser::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
void AckQueryUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
void AckQueryUser::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
::google::protobuf::uint32 AckQueryUser::userid() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.userId)
  return userid_;
}
void AckQueryUser::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.userId)
}

// optional string nickName = 5;
bool AckQueryUser::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckQueryUser::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void AckQueryUser::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckQueryUser::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& AckQueryUser::nickname() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.nickName)
  return nickname_.GetNoArena();
}
void AckQueryUser::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.nickName)
}
#if LANG_CXX11
void AckQueryUser::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tnode.AckQueryUser.nickName)
}
#endif
void AckQueryUser::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tnode.AckQueryUser.nickName)
}
void AckQueryUser::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tnode.AckQueryUser.nickName)
}
::std::string* AckQueryUser::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:Tnode.AckQueryUser.nickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AckQueryUser::release_nickname() {
  // @@protoc_insertion_point(field_release:Tnode.AckQueryUser.nickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AckQueryUser::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:Tnode.AckQueryUser.nickName)
}

// optional int32 vipLevel = 6;
bool AckQueryUser::has_viplevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AckQueryUser::set_has_viplevel() {
  _has_bits_[0] |= 0x00000020u;
}
void AckQueryUser::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000020u;
}
void AckQueryUser::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
::google::protobuf::int32 AckQueryUser::viplevel() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.vipLevel)
  return viplevel_;
}
void AckQueryUser::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.vipLevel)
}

// optional int32 regTime = 7;
bool AckQueryUser::has_regtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AckQueryUser::set_has_regtime() {
  _has_bits_[0] |= 0x00000040u;
}
void AckQueryUser::clear_has_regtime() {
  _has_bits_[0] &= ~0x00000040u;
}
void AckQueryUser::clear_regtime() {
  regtime_ = 0;
  clear_has_regtime();
}
::google::protobuf::int32 AckQueryUser::regtime() const {
  // @@protoc_insertion_point(field_get:Tnode.AckQueryUser.regTime)
  return regtime_;
}
void AckQueryUser::set_regtime(::google::protobuf::int32 value) {
  set_has_regtime();
  regtime_ = value;
  // @@protoc_insertion_point(field_set:Tnode.AckQueryUser.regTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqReloadData::kOpcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqReloadData::ReqReloadData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2ftnode_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tnode.ReqReloadData)
}
ReqReloadData::ReqReloadData(const ReqReloadData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:Tnode.ReqReloadData)
}

void ReqReloadData::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
}

ReqReloadData::~ReqReloadData() {
  // @@protoc_insertion_point(destructor:Tnode.ReqReloadData)
  SharedDtor();
}

void ReqReloadData::SharedDtor() {
}

void ReqReloadData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqReloadData::descriptor() {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqReloadData& ReqReloadData::default_instance() {
  protobuf_proto_2ftnode_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqReloadData* ReqReloadData::New(::google::protobuf::Arena* arena) const {
  ReqReloadData* n = new ReqReloadData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqReloadData::Clear() {
// @@protoc_insertion_point(message_clear_start:Tnode.ReqReloadData)
  opcode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqReloadData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tnode.ReqReloadData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tnode.ReqReloadData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tnode.ReqReloadData)
  return false;
#undef DO_
}

void ReqReloadData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tnode.ReqReloadData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 opcode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tnode.ReqReloadData)
}

::google::protobuf::uint8* ReqReloadData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tnode.ReqReloadData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 opcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tnode.ReqReloadData)
  return target;
}

size_t ReqReloadData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tnode.ReqReloadData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 opcode = 1;
  if (has_opcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqReloadData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tnode.ReqReloadData)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqReloadData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqReloadData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tnode.ReqReloadData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tnode.ReqReloadData)
    MergeFrom(*source);
  }
}

void ReqReloadData::MergeFrom(const ReqReloadData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tnode.ReqReloadData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_opcode()) {
    set_opcode(from.opcode());
  }
}

void ReqReloadData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tnode.ReqReloadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReloadData::CopyFrom(const ReqReloadData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tnode.ReqReloadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReloadData::IsInitialized() const {
  return true;
}

void ReqReloadData::Swap(ReqReloadData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqReloadData::InternalSwap(ReqReloadData* other) {
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqReloadData::GetMetadata() const {
  protobuf_proto_2ftnode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ftnode_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqReloadData

// optional int32 opcode = 1;
bool ReqReloadData::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqReloadData::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqReloadData::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqReloadData::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
::google::protobuf::int32 ReqReloadData::opcode() const {
  // @@protoc_insertion_point(field_get:Tnode.ReqReloadData.opcode)
  return opcode_;
}
void ReqReloadData::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:Tnode.ReqReloadData.opcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Tnode

// @@protoc_insertion_point(global_scope)
